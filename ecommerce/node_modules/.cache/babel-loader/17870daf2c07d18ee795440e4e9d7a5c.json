{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst UpdateMetadataValues = props => {\n  // useEffect(()=>{\n  // },[])\n  //     // useEffect(()=>{\n  //     //     a(authForm.category.value)\n  //     //        },[authForm.category.value])\n  //     let option=[]\n  //     if(props.category!==null)\n  //     {\n  //     for(let i=0;i<props.category.length;i++)\n  //     {\n  //         option.push({\n  //             value:props.category[i].id,\n  //             displayValue:props.category[i].name\n  //         })\n  //     }\n  // }\n  // let metaid = [];\n  //     let option1=[]\n  //     if(props.metadataFields!==null)\n  //     {\n  //     for(let i=0;i<props.metadataFields.length;i++)\n  //     {\n  //         option1.push({\n  //             value:props.metadataFields[i].id,\n  //             displayValue:props.metadataFields[i].name\n  //         })\n  //     }\n  // }\n  // console.log(\"before auth\",metaid)\n  //     const [authForm, setAuthForm] = useState({\n  //         category: {\n  //             elementType: 'select',\n  //             elementConfig: {\n  //                 options: option\n  //             },\n  //             value: option[0].value,\n  //             validation: {},\n  //             valid: true\n  //         },\n  //         metadataFields: {\n  //             elementType: 'select',\n  //             elementConfig: {\n  //                 options: metaid\n  //             },\n  //             value: metaid[0].value,\n  //             validation: {},\n  //             valid: true\n  //         },\n  //         categoryMetadataField: {\n  //             elementType: 'input',\n  //             elementConfig: {\n  //                 type: 'categoryMetadataField',\n  //                 placeholder: 'your categoryMetadataFieldValues'\n  //             },\n  //             value: '',\n  //             validation: {\n  //                 required: true,\n  //                 minLength: 6\n  //             },\n  //             valid: false,\n  //             touched: false\n  //         }\n  //     })\n  //     // const a=(id)=>{\n  //     //     metaid=[]\n  //     //     console.log(\"id is\",id)\n  //     //     for (let i = 0; i < props.metadataFields.length; i++) {\n  //     //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n  //     //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n  //     //             console.log(\"id received\",id)\n  //     //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n  //     //             if(a==id)\n  //     //             {\n  //     //                 metaid.push({\n  //     //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n  //     //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n  //     //                     )\n  //     //             }\n  //     //         }\n  //     //     }\n  //     //     console.log(\"metaid is\",metaid)\n  //     // }\n  //     const fetchIdHandler=()=>{\n  //         let id=authForm.category.value;\n  //         console.log(id)\n  //         for(let i=0;i<props.metadataFields.length;i++)\n  //         {\n  //             metaid.push(\"sfsdf\")\n  //         }\n  //     }\n  //     console.log(document.referrer,\"props\")\n  //     const registerHandler = (event) => {\n  //         event.preventDefault();\n  //         props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n  //     }\n  //     const inputChangedHandler = (event, controlName) => {\n  //         const updatedControls = {\n  //             ...authForm,\n  //             [controlName]: {\n  //                 ...authForm[controlName],\n  //                 value: event.target.value,\n  //                 valid: checkValidity(event.target.value, authForm[controlName].validation),\n  //                 touched: true\n  //             }\n  //         };\n  //         setAuthForm(updatedControls);\n  //     }\n  //     const formElementsArray = [];\n  //     for (let key in authForm) {\n  //         formElementsArray.push({\n  //             id: key,\n  //             config: authForm[key]\n  //         })\n  //     }\n  //     let form = formElementsArray.map(formElement => (\n  //         <Input\n  //             key={formElement.id}\n  //             elementType={formElement.config.elementType}\n  //             elementConfig={formElement.config.elementConfig}\n  //             value={formElement.config.value}\n  //             changed={(event) => inputChangedHandler(event, formElement.id)}\n  //             touched={formElement.config.touched}\n  //         />\n  //     ))\n  //     return (\n  //         <div className={classes.Auth}>\n  //             <form onSubmit={registerHandler}>\n  //                 {form}\n  //                 <button className={classes.Button}>Submit</button>\n  //             </form>\n  //             <button className={classes.Button} onClick={fetchIdHandler}>Fetch Metadata Fields</button>\n  //         </div>\n  //     )\n  // }\n  const [m, setm] = useState([]);\n  let b = [];\n\n  const loadMetadataFields = id => {\n    for (let i = 0; i < props.metadataFields.length; i++) {\n      for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n        console.log(\"id inside\", props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid);\n        console.log(\"id received\", id);\n        let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid;\n\n        if (a == id) {\n          b.push({\n            value: props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n            displayValue: props.metadataFields[i].categoryMetadataFieldValues[j].fieldValues\n          });\n        }\n      }\n    }\n\n    setm(b);\n  };\n\n  const [name, setname] = useState([]);\n  let c = [];\n\n  const loadMetadataFieldss = id => {\n    for (let i = 0; i < props.metadataFields.length; i++) {\n      c.push({\n        value: props.metadataFields[i].id,\n        displayValue: props.metadataFields[i].name\n      });\n    }\n  };\n\n  setname(c);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 1\n    }\n  }, console.log(m), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", Object.assign({}, props.category, {\n    onChange: event => {\n      loadMetadataFields(event.target.value);\n    },\n    disabled: !props.category.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, \"Select a category\"), props.category.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    value: option.id,\n    key: option.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 41\n    }\n  }, option.name))), /*#__PURE__*/React.createElement(\"select\", Object.assign({}, m, {\n    disabled: !m.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"option\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, \"Select a name\"), m.map(option => /*#__PURE__*/React.createElement(\"option\", {\n    value: option.value,\n    key: option.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 28\n    }\n  }, option.displayValue)))));\n};\n\nconst mapStateToProps = state => {\n  console.log(state.category.metadataFields);\n  return {\n    error: state.category.error,\n    category: state.category.category,\n    metadataFields: state.category.metadataFields\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory()),\n    onClicked1: () => dispatch(actions.viewCategoryMetadataField),\n    onAdd: (id1, id2, values) => dispatch(actions.add(id1, id2, values))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","actions","connect","UpdateMetadataValues","props","m","setm","b","loadMetadataFields","id","i","metadataFields","length","j","categoryMetadataFieldValues","console","log","categoryMetadataFieldValuesId","cid","a","push","value","mid","displayValue","fieldValues","name","setname","c","loadMetadataFieldss","category","event","target","map","option","mapStateToProps","state","error","mapDispatchToProps","dispatch","onClicked","getCategory","onClicked1","viewCategoryMetadataField","onAdd","id1","id2","values","add"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst UpdateMetadataValues = props => {\n// useEffect(()=>{\n\n// },[])\n\n//     // useEffect(()=>{\n//     //     a(authForm.category.value)\n//     //        },[authForm.category.value])\n       \n\n//     let option=[]\n//     if(props.category!==null)\n//     {\n//     for(let i=0;i<props.category.length;i++)\n//     {\n//         option.push({\n//             value:props.category[i].id,\n//             displayValue:props.category[i].name\n//         })\n//     }\n// }\n// let metaid = [];\n//     let option1=[]\n//     if(props.metadataFields!==null)\n//     {\n//     for(let i=0;i<props.metadataFields.length;i++)\n//     {\n//         option1.push({\n//             value:props.metadataFields[i].id,\n//             displayValue:props.metadataFields[i].name\n//         })\n//     }\n// }\n\n// console.log(\"before auth\",metaid)\n//     const [authForm, setAuthForm] = useState({\n//         category: {\n//             elementType: 'select',\n//             elementConfig: {\n//                 options: option\n//             },\n//             value: option[0].value,\n//             validation: {},\n//             valid: true\n//         },\n//         metadataFields: {\n//             elementType: 'select',\n//             elementConfig: {\n//                 options: metaid\n//             },\n//             value: metaid[0].value,\n//             validation: {},\n//             valid: true\n//         },\n//         categoryMetadataField: {\n//             elementType: 'input',\n//             elementConfig: {\n//                 type: 'categoryMetadataField',\n//                 placeholder: 'your categoryMetadataFieldValues'\n//             },\n//             value: '',\n//             validation: {\n//                 required: true,\n//                 minLength: 6\n//             },\n//             valid: false,\n//             touched: false\n//         }\n//     })\n//     // const a=(id)=>{\n//     //     metaid=[]\n//     //     console.log(\"id is\",id)\n//     //     for (let i = 0; i < props.metadataFields.length; i++) {\n//     //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n//     //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n//     //             console.log(\"id received\",id)\n//     //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n//     //             if(a==id)\n//     //             {\n                    \n//     //                 metaid.push({\n//     //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n//     //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n//     //                     )\n//     //             }\n//     //         }\n//     //     }\n//     //     console.log(\"metaid is\",metaid)\n//     // }\n\n    \n//     const fetchIdHandler=()=>{\n//         let id=authForm.category.value;\n//         console.log(id)\n//         for(let i=0;i<props.metadataFields.length;i++)\n//         {\n//             metaid.push(\"sfsdf\")\n//         }\n//     }\n  \n//     console.log(document.referrer,\"props\")\n\n    \n//     const registerHandler = (event) => {\n//         event.preventDefault();\n//         props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n//     }\n\n//     const inputChangedHandler = (event, controlName) => {\n//         const updatedControls = {\n//             ...authForm,\n//             [controlName]: {\n//                 ...authForm[controlName],\n//                 value: event.target.value,\n//                 valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n//                 touched: true\n//             }\n\n//         };\n//         setAuthForm(updatedControls);\n//     }\n\n//     const formElementsArray = [];\n//     for (let key in authForm) {\n//         formElementsArray.push({\n//             id: key,\n//             config: authForm[key]\n\n//         })\n//     }\n\n//     let form = formElementsArray.map(formElement => (\n//         <Input\n//             key={formElement.id}\n//             elementType={formElement.config.elementType}\n//             elementConfig={formElement.config.elementConfig}\n//             value={formElement.config.value}\n//             changed={(event) => inputChangedHandler(event, formElement.id)}\n//             touched={formElement.config.touched}\n//         />\n//     ))\n\n//     return (\n//         <div className={classes.Auth}>\n//             <form onSubmit={registerHandler}>\n//                 {form}\n//                 <button className={classes.Button}>Submit</button>\n//             </form>\n//             <button className={classes.Button} onClick={fetchIdHandler}>Fetch Metadata Fields</button>\n                \n//         </div>\n//     )\n\n// }\nconst [m,setm]=useState([])\nlet b=[]\nconst loadMetadataFields=(id)=>{\n    for (let i = 0; i < props.metadataFields.length; i++) {\n                    for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n                        console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n                        console.log(\"id received\",id)\n                        let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n                        if(a==id)\n                        {\n                            \n                            b.push({\n                                value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n                    displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].fieldValues}\n                                )\n                        }\n                    }\n                }\n                setm(b)\n\n\n}\nconst [name,setname]=useState([])\nlet c=[]\nconst loadMetadataFieldss=(id)=>{\n    for (let i = 0; i < props.metadataFields.length; i++) {\n                   \n                            c.push({\n                                value:props.metadataFields[i].id,\n                               displayValue:props.metadataFields[i].name}\n                                )\n                        }\n                    }\n                    setname(c)\n\n                \n               \n\n\n\nreturn(\n\n<div>\n    {console.log(m)}\n    <form>\n        <select {...props.category}\n          onChange={event => {\n                   \n          loadMetadataFields(event.target.value); \n          }}\n          disabled={!props.category.length}              \n          >\n          <option>Select a category</option>\n          {props.category.map(option => <option value={option.id} key={option.id}>{option.name}</option>)}\n        </select>\n\n\n\n        <select {...m}\n          \n          disabled={!m.length}                 \n        >\n          <option>Select a name</option>\n          {m.map(option => <option value={option.value} key={option.value}>{option.displayValue}</option>)}\n        </select>\n      </form>\n      </div>\n)\n        }\n\nconst mapStateToProps = state => {\n    console.log(state.category.metadataFields)\n    return {\n        error: state.category.error,\n        category: state.category.category,\n        metadataFields:state.category.metadataFields\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory()),\n        onClicked1:()=>dispatch(actions.viewCategoryMetadataField),\n        onAdd:(id1,id2,values)=>dispatch(actions.add(id1,id2,values))\n\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)\n"]},"metadata":{},"sourceType":"module"}