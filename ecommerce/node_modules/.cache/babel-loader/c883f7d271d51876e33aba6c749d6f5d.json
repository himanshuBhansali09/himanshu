{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/ForgotPassword/ForgotPassword.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst ForgotPassword = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.forgotPasswordSuccessful) {\n    props.history.push(\"/emailSent\");\n  }\n\n  const forgotPasswordHandler = event => {\n    event.preventDefault();\n    props.onClicked(authForm.email.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, formElement.id), /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: forgotPasswordHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 18\n    }\n  }, \"Send Email\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.register.error,\n    forgotPasswordSuccessful: state.forgotPassword.forgotPasswordSuccessful\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: email => dispatch(actions.forgotPassword(email))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/ForgotPassword/ForgotPassword.js"],"names":["React","useState","Input","classes","checkValidity","actions","connect","ForgotPassword","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","forgotPasswordSuccessful","history","push","forgotPasswordHandler","event","preventDefault","onClicked","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","register","forgotPassword","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport {checkValidity} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst ForgotPassword = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        if(props.forgotPasswordSuccessful)\n        {\n            props.history.push(\"/emailSent\")\n        }\n\n        const forgotPasswordHandler=(event)=>{\n            event.preventDefault();\n            props.onClicked(authForm.email.value);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n    \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <>\n            <label>{formElement.id}</label>\n            <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n        />\n        </>\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={forgotPasswordHandler}>\n                 {form}\n                 <button className={classes.Button}>Send Email</button>\n                </form>\n            </div>\n        )\n        \n        }\n\n\nconst mapStateToProps = state=>{\n    return{\n        error:state.register.error,\n        forgotPasswordSuccessful:state.forgotPassword.forgotPasswordSuccessful\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onClicked: (email)=>dispatch(actions.forgotPassword(email))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(ForgotPassword)\n"]},"metadata":{},"sourceType":"module"}