{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Customer/UpdateProfile.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nconst UpdateProfile = props => {\n  const {\n    onClicked\n  } = props;\n  useEffect(() => {\n    onClicked();\n  }, [onClicked]);\n  const [authForm, setAuthForm] = useState({\n    firstName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'firstName',\n        placeholder: 'your email'\n      },\n      value: props.profile.firstName,\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    middleName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'middleName',\n        placeholder: 'your email'\n      },\n      value: props.profile.middleName,\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    lastname: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'lastName',\n        placeholder: 'your password'\n      },\n      value: props.profile.lastName,\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    contactNo: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'contactNo',\n        placeholder: 'your password'\n      },\n      value: props.profile.contactNo,\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.firstName.value, authForm.middleName.value, authForm.lastname.value, authForm.contactNo.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 18\n    }\n  }, \"Submit\"))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    profile: state.customer.profile\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getProfile()),\n    onAuth: (firstName, middleName, lastName, contactNo) => dispatch(actions.updateProfile(firstName, middleName, lastName, contactNo))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProfile);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Customer/UpdateProfile.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","connect","actions","UpdateProfile","props","onClicked","authForm","setAuthForm","firstName","elementType","elementConfig","type","placeholder","value","profile","validation","required","isEmail","valid","touched","middleName","lastname","lastName","minLength","contactNo","submitHandler","event","preventDefault","onAuth","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","push","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","customer","mapDispatchToProps","dispatch","getProfile","updateProfile"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nconst UpdateProfile = props => {\n\n    const {onClicked}=props\n    useEffect(()=>{\n        onClicked()\n    },[onClicked])\n\n    \n    const[authForm,setAuthForm] =  useState({\n            firstName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'firstName',\n                    placeholder:'your email'\n                },\n                value:props.profile.firstName,\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            middleName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'middleName',\n                    placeholder:'your email'\n                },\n                value:props.profile.middleName,\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            lastname:{\n                elementType:'input',\n                elementConfig:{\n                    type:'lastName',\n                    placeholder:'your password'\n                },\n                value:props.profile.lastName,\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            contactNo:{\n                elementType:'input',\n                elementConfig:{\n                    type:'contactNo',\n                    placeholder:'your password'\n                },\n                value:props.profile.contactNo,\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n\n        const submitHandler=(event)=>{\n            event.preventDefault();\n            props.onAuth(authForm.firstName.value,\n                authForm.middleName.value,\n                authForm.lastname.value,\n                authForm.contactNo.value,)\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n       \n        return (\n            <React.Fragment>\n            <div className={classes.Auth}>\n               \n                <form onSubmit={submitHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n                \n            </div>\n             </React.Fragment>\n        )\n        \n        }\n        const mapStateToProps = state=>{\n            return{\n                profile:state.customer.profile\n            }\n        }\n        \n        const mapDispatchToProps = dispatch =>{\n            return{\n                onClicked: ()=>dispatch(actions.getProfile()),\n                onAuth:(firstName,middleName,lastName,contactNo)=>dispatch(actions.updateProfile(firstName,middleName,lastName,contactNo))\n                }\n        }\n        \n\nexport default connect(mapStateToProps,mapDispatchToProps)(UpdateProfile)\n"]},"metadata":{},"sourceType":"module"}