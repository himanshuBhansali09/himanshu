{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/RegisterAsSeller/RegisterAsSeller.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst RegisterAsSeller = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    firstName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'firstName',\n        placeholder: 'your firstName'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    lastName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'lastName',\n        placeholder: 'your lastName'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    companyContactNo: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'companyContactNo',\n        placeholder: 'your companyContactNo'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'passsword',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    confirmpassword: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'confirmpassword',\n        placeholder: 'your confirmpassword'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    companyName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'companyName',\n        placeholder: 'your companyName'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'city',\n        placeholder: 'your city'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    state: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'state',\n        placeholder: 'your state'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'country',\n        placeholder: 'your country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipcode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'zipcode',\n        placeholder: 'your zipcode'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    addressLine: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'addressLine',\n        placeholder: 'your addressLine'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    gstNo: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'gstNo',\n        placeholder: 'your gstNo'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onRegister(authForm.email.value, authForm.firstName.value, authForm.lastName.value, authForm.password.value, authForm.confirmpassword.value, authForm.contactNumber.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 18\n    }\n  }, \"Register\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.register.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRegister: (email, firstName, lastName, password, confirmPassword, contactNumber) => dispatch(actions.register(email, firstName, lastName, password, confirmPassword, contactNumber))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterAsSeller);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/RegisterAsSeller/RegisterAsSeller.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","RegisterAsSeller","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","firstName","lastName","companyContactNo","password","minLength","confirmpassword","companyName","city","state","country","zipcode","addressLine","gstNo","registerHandler","event","preventDefault","onRegister","contactNumber","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","push","id","config","form","map","formElement","Auth","Button","mapStateToProps","error","register","mapDispatchToProps","dispatch","confirmPassword"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst RegisterAsSeller = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            firstName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'firstName',\n                    placeholder:'your firstName'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            lastName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'lastName',\n                    placeholder:'your lastName'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                },\n                valid : false,\n                touched:false\n            },\n            companyContactNo:{\n                elementType:'input',\n                elementConfig:{\n                    type:'companyContactNo',\n                    placeholder:'your companyContactNo'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'passsword',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            confirmpassword:{\n                elementType:'input',\n                elementConfig:{\n                    type:'confirmpassword',\n                    placeholder:'your confirmpassword'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            companyName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'companyName',\n                    placeholder:'your companyName'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            city:{\n                elementType:'input',\n                elementConfig:{\n                    type:'city',\n                    placeholder:'your city'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            state:{\n                elementType:'input',\n                elementConfig:{\n                    type:'state',\n                    placeholder:'your state'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'country',\n                    placeholder:'your country'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            zipcode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'zipcode',\n                    placeholder:'your zipcode'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            addressLine:{\n                elementType:'input',\n                elementConfig:{\n                    type:'addressLine',\n                    placeholder:'your addressLine'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            gstNo:{\n                elementType:'input',\n                elementConfig:{\n                    type:'gstNo',\n                    placeholder:'your gstNo'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            }\n        })\n\n        const registerHandler=(event)=>{\n            event.preventDefault();\n            props.onRegister(authForm.email.value,authForm.firstName.value,authForm.lastName.value,authForm.password.value,authForm.confirmpassword.value,authForm.contactNumber.value);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n  \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={registerHandler}>\n                 {form}\n                 <button className={classes.Button}>Register</button>\n                </form>\n            </div>\n        )\n        \n        }\n\n\nconst mapStateToProps = state=>{\n    return{\n        error:state.register.error\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onRegister: (email,firstName,lastName,password,confirmPassword,contactNumber)=>dispatch(actions.register(email,firstName,lastName,password,confirmPassword,contactNumber))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(RegisterAsSeller)\n"]},"metadata":{},"sourceType":"module"}