{"ast":null,"code":"// import React, { useState, useEffect } from 'react'\n// import Input from '../../components/Ui/Backdrop/Input/Input';\n// import classes from '../ChangePassword/changePassword.module.css';\n// import { checkValidity } from '../../shared/utility';\n// import * as actions from '../../store/actions/index';\n// import { connect } from 'react-redux';\n// const UpdateMetadataValues = props => {\n// // useEffect(()=>{\n// // },[])\n// //     // useEffect(()=>{\n// //     //     a(authForm.category.value)\n// //     //        },[authForm.category.value])\n// //     let option=[]\n// //     if(props.category!==null)\n// //     {\n// //     for(let i=0;i<props.category.length;i++)\n// //     {\n// //         option.push({\n// //             value:props.category[i].id,\n// //             displayValue:props.category[i].name\n// //         })\n// //     }\n// // }\n// // let metaid = [];\n// //     let option1=[]\n// //     if(props.metadataFields!==null)\n// //     {\n// //     for(let i=0;i<props.metadataFields.length;i++)\n// //     {\n// //         option1.push({\n// //             value:props.metadataFields[i].id,\n// //             displayValue:props.metadataFields[i].name\n// //         })\n// //     }\n// // }\n// // console.log(\"before auth\",metaid)\n// //     const [authForm, setAuthForm] = useState({\n// //         category: {\n// //             elementType: 'select',\n// //             elementConfig: {\n// //                 options: option\n// //             },\n// //             value: option[0].value,\n// //             validation: {},\n// //             valid: true\n// //         },\n// //         metadataFields: {\n// //             elementType: 'select',\n// //             elementConfig: {\n// //                 options: metaid\n// //             },\n// //             value: metaid[0].value,\n// //             validation: {},\n// //             valid: true\n// //         },\n// //         categoryMetadataField: {\n// //             elementType: 'input',\n// //             elementConfig: {\n// //                 type: 'categoryMetadataField',\n// //                 placeholder: 'your categoryMetadataFieldValues'\n// //             },\n// //             value: '',\n// //             validation: {\n// //                 required: true,\n// //                 minLength: 6\n// //             },\n// //             valid: false,\n// //             touched: false\n// //         }\n// //     })\n// //     // const a=(id)=>{\n// //     //     metaid=[]\n// //     //     console.log(\"id is\",id)\n// //     //     for (let i = 0; i < props.metadataFields.length; i++) {\n// //     //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n// //     //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n// //     //             console.log(\"id received\",id)\n// //     //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n// //     //             if(a==id)\n// //     //             {\n// //     //                 metaid.push({\n// //     //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n// //     //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n// //     //                     )\n// //     //             }\n// //     //         }\n// //     //     }\n// //     //     console.log(\"metaid is\",metaid)\n// //     // }\n// //     const fetchIdHandler=()=>{\n// //         let id=authForm.category.value;\n// //         console.log(id)\n// //         for(let i=0;i<props.metadataFields.length;i++)\n// //         {\n// //             metaid.push(\"sfsdf\")\n// //         }\n// //     }\n// //     console.log(document.referrer,\"props\")\n// //     const registerHandler = (event) => {\n// //         event.preventDefault();\n// //         props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n// //     }\n// //     const inputChangedHandler = (event, controlName) => {\n// //         const updatedControls = {\n// //             ...authForm,\n// //             [controlName]: {\n// //                 ...authForm[controlName],\n// //                 value: event.target.value,\n// //                 valid: checkValidity(event.target.value, authForm[controlName].validation),\n// //                 touched: true\n// //             }\n// //         };\n// //         setAuthForm(updatedControls);\n// //     }\n// //     const formElementsArray = [];\n// //     for (let key in authForm) {\n// //         formElementsArray.push({\n// //             id: key,\n// //             config: authForm[key]\n// //         })\n// //     }\n// //     let form = formElementsArray.map(formElement => (\n// //         <Input\n// //             key={formElement.id}\n// //             elementType={formElement.config.elementType}\n// //             elementConfig={formElement.config.elementConfig}\n// //             value={formElement.config.value}\n// //             changed={(event) => inputChangedHandler(event, formElement.id)}\n// //             touched={formElement.config.touched}\n// //         />\n// //     ))\n// //     return (\n// //         <div className={classes.Auth}>\n// //             <form onSubmit={registerHandler}>\n// //                 {form}\n// //                 <button className={classes.Button}>Submit</button>\n// //             </form>\n// //             <button className={classes.Button} onClick={fetchIdHandler}>Fetch Metadata Fields</button>\n// //         </div>\n// //     )\n// // // }\n// // const [m,setm]=useState([])\n// // let b=[]\n// // const loadMetadataFields=(id)=>{\n// //     for (let i = 0; i < props.metadataFields.length; i++) {\n// //                     for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n// //                         console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n// //                         console.log(\"id received\",id)\n// //                         let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n// //                         if(a==id)\n// //                         {\n// //                             b.push({\n// //                                 value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n// //                     displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].fieldValues}\n// //                                 )\n// //                         }\n// //                     }\n// //                 }\n// //                 setm(b)\n// // }\n// const [name,setname]=useState([])\n// let c=[]\n// const loadMetadataFieldss=(id)=>{\n//     for (let i = 0; i < props.metadataFields.length; i++) {\n//                             c.push({\n//                                 value:props.metadataFields[i].id,\n//                                displayValue:props.metadataFields[i].name}\n//                                 )\n//                         }\n//                         setname(c)\n//                     }\n// return(\n// <div>\n//     <form>\n//         <select {...props.category}\n//           onChange={event => {\n//           loadMetadataFieldss(event.target.value); \n//           }}\n//           disabled={!props.category.length}              \n//           >\n//           <option>Select a category</option>\n//           {props.category.map(option => <option value={option.id} key={option.id}>{option.name}</option>)}\n//         </select>\n//         <select {...name}\n//           disabled={!name.length}                 \n//         >\n//           <option>Select a name</option>\n//           {name.map(option => <option value={option.value} key={option.value}>{option.displayValue}</option>)}\n//         </select>\n//       </form>\n//       </div>\n// )\n//         }\n// const mapStateToProps = state => {\n//     console.log(state.category.metadataFields)\n//     return {\n//         error: state.category.error,\n//         category: state.category.category,\n//         metadataFields:state.category.metadataFields\n//     }\n// }\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onClicked: () => dispatch(actions.getCategory()),\n//         onClicked1:()=>dispatch(actions.viewCategoryMetadataField),\n//         onAdd:(id1,id2,values)=>dispatch(actions.add(id1,id2,values))\n//     }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import React, { useState, useEffect } from 'react'\n// import Input from '../../components/Ui/Backdrop/Input/Input';\n// import classes from '../ChangePassword/changePassword.module.css';\n// import { checkValidity } from '../../shared/utility';\n// import * as actions from '../../store/actions/index';\n// import { connect } from 'react-redux';\n// const UpdateMetadataValues = props => {\n\n// // useEffect(()=>{\n// // },[])\n// //     // useEffect(()=>{\n// //     //     a(authForm.category.value)\n// //     //        },[authForm.category.value])\n// //     let option=[]\n// //     if(props.category!==null)\n// //     {\n// //     for(let i=0;i<props.category.length;i++)\n// //     {\n// //         option.push({\n// //             value:props.category[i].id,\n// //             displayValue:props.category[i].name\n// //         })\n// //     }\n// // }\n// // let metaid = [];\n// //     let option1=[]\n// //     if(props.metadataFields!==null)\n// //     {\n// //     for(let i=0;i<props.metadataFields.length;i++)\n// //     {\n// //         option1.push({\n// //             value:props.metadataFields[i].id,\n// //             displayValue:props.metadataFields[i].name\n// //         })\n// //     }\n// // }\n\n// // console.log(\"before auth\",metaid)\n// //     const [authForm, setAuthForm] = useState({\n// //         category: {\n// //             elementType: 'select',\n// //             elementConfig: {\n// //                 options: option\n// //             },\n// //             value: option[0].value,\n// //             validation: {},\n// //             valid: true\n// //         },\n// //         metadataFields: {\n// //             elementType: 'select',\n// //             elementConfig: {\n// //                 options: metaid\n// //             },\n// //             value: metaid[0].value,\n// //             validation: {},\n// //             valid: true\n// //         },\n// //         categoryMetadataField: {\n// //             elementType: 'input',\n// //             elementConfig: {\n// //                 type: 'categoryMetadataField',\n// //                 placeholder: 'your categoryMetadataFieldValues'\n// //             },\n// //             value: '',\n// //             validation: {\n// //                 required: true,\n// //                 minLength: 6\n// //             },\n// //             valid: false,\n// //             touched: false\n// //         }\n// //     })\n// //     // const a=(id)=>{\n// //     //     metaid=[]\n// //     //     console.log(\"id is\",id)\n// //     //     for (let i = 0; i < props.metadataFields.length; i++) {\n// //     //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n// //     //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n// //     //             console.log(\"id received\",id)\n// //     //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n// //     //             if(a==id)\n// //     //             {\n                    \n// //     //                 metaid.push({\n// //     //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n// //     //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n// //     //                     )\n// //     //             }\n// //     //         }\n// //     //     }\n// //     //     console.log(\"metaid is\",metaid)\n// //     // }\n\n    \n// //     const fetchIdHandler=()=>{\n// //         let id=authForm.category.value;\n// //         console.log(id)\n// //         for(let i=0;i<props.metadataFields.length;i++)\n// //         {\n// //             metaid.push(\"sfsdf\")\n// //         }\n// //     }\n  \n// //     console.log(document.referrer,\"props\")\n\n    \n// //     const registerHandler = (event) => {\n// //         event.preventDefault();\n// //         props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n// //     }\n\n// //     const inputChangedHandler = (event, controlName) => {\n// //         const updatedControls = {\n// //             ...authForm,\n// //             [controlName]: {\n// //                 ...authForm[controlName],\n// //                 value: event.target.value,\n// //                 valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n// //                 touched: true\n// //             }\n\n// //         };\n// //         setAuthForm(updatedControls);\n// //     }\n\n// //     const formElementsArray = [];\n// //     for (let key in authForm) {\n// //         formElementsArray.push({\n// //             id: key,\n// //             config: authForm[key]\n\n// //         })\n// //     }\n\n// //     let form = formElementsArray.map(formElement => (\n// //         <Input\n// //             key={formElement.id}\n// //             elementType={formElement.config.elementType}\n// //             elementConfig={formElement.config.elementConfig}\n// //             value={formElement.config.value}\n// //             changed={(event) => inputChangedHandler(event, formElement.id)}\n// //             touched={formElement.config.touched}\n// //         />\n// //     ))\n\n// //     return (\n// //         <div className={classes.Auth}>\n// //             <form onSubmit={registerHandler}>\n// //                 {form}\n// //                 <button className={classes.Button}>Submit</button>\n// //             </form>\n// //             <button className={classes.Button} onClick={fetchIdHandler}>Fetch Metadata Fields</button>\n                \n// //         </div>\n// //     )\n\n// // // }\n// // const [m,setm]=useState([])\n// // let b=[]\n// // const loadMetadataFields=(id)=>{\n// //     for (let i = 0; i < props.metadataFields.length; i++) {\n// //                     for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n// //                         console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n// //                         console.log(\"id received\",id)\n// //                         let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n// //                         if(a==id)\n// //                         {\n                            \n// //                             b.push({\n// //                                 value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n// //                     displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].fieldValues}\n// //                                 )\n// //                         }\n// //                     }\n// //                 }\n// //                 setm(b)\n\n\n// // }\n// const [name,setname]=useState([])\n// let c=[]\n// const loadMetadataFieldss=(id)=>{\n//     for (let i = 0; i < props.metadataFields.length; i++) {\n                   \n//                             c.push({\n//                                 value:props.metadataFields[i].id,\n//                                displayValue:props.metadataFields[i].name}\n//                                 )\n//                         }\n//                         setname(c)\n//                     }\n// return(\n\n// <div>\n//     <form>\n//         <select {...props.category}\n//           onChange={event => {\n                   \n//           loadMetadataFieldss(event.target.value); \n//           }}\n//           disabled={!props.category.length}              \n//           >\n//           <option>Select a category</option>\n//           {props.category.map(option => <option value={option.id} key={option.id}>{option.name}</option>)}\n//         </select>\n\n\n\n//         <select {...name}\n          \n//           disabled={!name.length}                 \n//         >\n//           <option>Select a name</option>\n//           {name.map(option => <option value={option.value} key={option.value}>{option.displayValue}</option>)}\n//         </select>\n//       </form>\n//       </div>\n// )\n//         }\n\n// const mapStateToProps = state => {\n//     console.log(state.category.metadataFields)\n//     return {\n//         error: state.category.error,\n//         category: state.category.category,\n//         metadataFields:state.category.metadataFields\n//     }\n// }\n\n// const mapDispatchToProps = dispatch => {\n//     return {\n//         onClicked: () => dispatch(actions.getCategory()),\n//         onClicked1:()=>dispatch(actions.viewCategoryMetadataField),\n//         onAdd:(id1,id2,values)=>dispatch(actions.add(id1,id2,values))\n//     }\n// }\n// export default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)\n"]},"metadata":{},"sourceType":"module"}