{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Login/Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\n\nconst Login = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const {\n    authRedirectPath,\n    onSetAuthRedirectPath\n  } = props;\n  useEffect(() => {\n    if (authRedirectPath !== '/') {\n      onSetAuthRedirectPath();\n    }\n  }, [authRedirectPath, onSetAuthRedirectPath]);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value);\n  };\n\n  const redirectToSignup = () => {\n    props.history.push(\"/register\");\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 18\n    }\n  }, \"Login\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 18\n    }\n  }, \"New to this site\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: redirectToSignup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 18\n    }\n  }, \"SignUp now\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.token !== null,\n    authRedirectPath: state.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, passsword) => dispatch(actions.auth(email, passsword)) // onSetAuthRedirectPath: ()=> dispatch(actions.setAuthRedirectPath('/'))\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Login/Login.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","connect","actions","Login","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","redirectToSignup","history","push","formElementsArray","key","id","config","form","map","formElement","Auth","mapStateToProps","state","isAuthenticated","token","mapDispatchToProps","dispatch","passsword","auth"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index'\n\nconst Login = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        const {authRedirectPath,onSetAuthRedirectPath} = props;\n        useEffect(()=>{\n            if(authRedirectPath!=='/'){\n                onSetAuthRedirectPath();\n            }\n        },[authRedirectPath,onSetAuthRedirectPath])\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const submitHandler=(event)=>{\n        event.preventDefault();\n        props.onAuth(authForm.email.value,authForm.password.value)\n    }\n\n    const redirectToSignup=()=>{\n       props.history.push(\"/register\")\n    }\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n               \n                <form onSubmit={submitHandler}>\n                 {form}\n                 <button>Login</button>\n                 <br/>\n                 <label>New to this site</label>\n                 <br/>\n                 <button onClick={redirectToSignup}>SignUp now</button>\n                </form>\n            </div>\n        )\n        \n        }\n\nconst mapStateToProps = state=>{\n            return{\n                isAuthenticated:state.token!==null,\n                authRedirectPath:state.authRedirectPath\n            }\n        }\n        \nconst mapDispatchToProps = dispatch =>{\n            return{\n                onAuth: (email,passsword)=>dispatch(actions.auth(email,passsword)),\n                // onSetAuthRedirectPath: ()=> dispatch(actions.setAuthRedirectPath('/'))\n            }\n        }\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Login)\n"]},"metadata":{},"sourceType":"module"}