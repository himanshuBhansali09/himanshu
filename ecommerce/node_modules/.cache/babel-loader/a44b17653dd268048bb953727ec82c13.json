{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Login/Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Input/Input';\nimport classes from './auth.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\n\nconst Auth = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'passsword',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setIsSignup(!isSignup);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }));\n\n  if (props.loading) {\n    form = /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 18\n      }\n    });\n  }\n\n  let errorMessage = null;\n\n  if (props.error) {\n    errorMessage = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, props.error.message);\n  }\n\n  let authRedirect = null;\n\n  if (props.isAuthenticated) {\n    authRedirect = /*#__PURE__*/React.createElement(Redirect, {\n      to: props.authRedirectPath,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 26\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, authRedirect, errorMessage, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(Button, {\n    btnType: \"Success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 18\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(Button, {\n    clicked: switchAuthModeHandler,\n    btnType: \"Danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, \"Switch to \", isSignup ? 'SIGNUP' : 'SIGNIN'));\n};\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, passsword, isSignup) => dispatch(actions.auth(email, passsword, isSignup)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Login/Login.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","Auth","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","isSignup","switchAuthModeHandler","setIsSignup","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMessage","error","message","authRedirect","isAuthenticated","authRedirectPath","mapStateToProps","state","auth","token","buildingBurger","burgerBuilder","building","mapDispatchToProps","dispatch","passsword","actions","onSetAuthRedirectPath","setAuthRedirectPath","connect"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Input/Input';\nimport classes from './auth.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nconst Auth = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'passsword',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        \n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                touched:true\n\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const submitHandler=(event)=>{\n        event.preventDefault();\n        props.onAuth(authForm.email.value,authForm.password.value,isSignup)\n    }\n\n   const switchAuthModeHandler=()=>{\n     setIsSignup(!isSignup);\n    }\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n\n        if(props.loading)\n        {\n            form=<Spinner/>\n        }\n\n        let errorMessage=null;\n          \n        if(props.error){\n            errorMessage=(\n                <p>{props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if(props.isAuthenticated){\n            authRedirect=<Redirect to={props.authRedirectPath}/>\n        }\n\n\n        return (\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={submitHandler}>\n                 {form}\n                 <Button btnType=\"Success\">Submit</Button>\n                </form>\n        <Button \n        clicked={switchAuthModeHandler}\n        btnType=\"Danger\">Switch to {isSignup ? 'SIGNUP' : 'SIGNIN'}</Button>\n            </div>\n        )\n        \n        }\n\nconst mapStateToProps = state=>{\n    return{\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token!==null,\n        buildingBurger:state.burgerBuilder.building,\n        authRedirectPath:state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onAuth: (email,passsword,isSignup)=>dispatch(actions.auth(email,passsword,isSignup)),\n        onSetAuthRedirectPath: ()=> dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth)\n"]},"metadata":{},"sourceType":"module"}