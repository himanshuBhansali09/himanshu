{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst UpdateMetadataValues = props => {\n  let option = [];\n\n  if (props.category !== null) {\n    for (let i = 0; i < props.category.length; i++) {\n      console.log(props.category[i]);\n      option.push({\n        value: props.category[i].id,\n        displayValue: props.category[i].name\n      });\n    }\n  }\n\n  console.log(\"here first\"); //     if(props.metadataFields!==null)\n  //     {\n  //     for(let i=0;i<props.metadataFields.length;i++)\n  //     {\n  //         console.log(props.metadataFields)\n  //         option1.push({\n  //             value:props.metadataFields[i].id,\n  //             displayValue:props.metadataFields[i].name\n  //         })\n  //     }\n  // }\n  // if (option1.length<2) \n  // {\n  //     console.log(\"here\")\n  //     alert(\"no values present to update\")\n  //     props.history.goBack()\n  //     window.location.reload(false)\n  //     option1.push(\n  //         {\n  //             value:null,\n  //            displayValue:null\n  //         }\n  //     )\n  // }\n\n  const [authForm, setAuthForm] = useState({\n    category: {\n      elementType: 'select',\n      elementConfig: {\n        options: option\n      },\n      value: option[0].value,\n      validation: {},\n      valid: true\n    },\n    metadataFields: {\n      elementType: 'select',\n      elementConfig: {\n        options: ''\n      },\n      value: '',\n      validation: {},\n      valid: true\n    },\n    categoryMetadataFieldValues: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryMetadataFieldValues',\n        placeholder: 'your categoryMetadataFieldValues'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onAdd(authForm.category.value, authForm.metadataFields.value, authForm.categoryMetadataField.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.category.error,\n    categoriesForAdmin: state.category.categoriesForAdmin,\n    metadataFields: state.category.metadataFields,\n    id: state.category.id,\n    category: state.category.category\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getAllCategoriesForAdmin())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","UpdateMetadataValues","props","option","category","i","length","console","log","push","value","id","displayValue","name","authForm","setAuthForm","elementType","elementConfig","options","validation","valid","metadataFields","categoryMetadataFieldValues","type","placeholder","required","minLength","touched","registerHandler","event","preventDefault","onAdd","categoryMetadataField","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","categoriesForAdmin","mapDispatchToProps","dispatch","onClicked","getAllCategoriesForAdmin"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst UpdateMetadataValues = props => {   \n    let option=[]\n    if(props.category!==null)\n    {\n    for(let i=0;i<props.category.length;i++)\n    {\n        console.log(props.category[i])\n        option.push({\n            value:props.category[i].id,\n            displayValue:props.category[i].name\n        })\n    }\n}\nconsole.log(\"here first\")\n\n    \n   \n//     if(props.metadataFields!==null)\n//     {\n//     for(let i=0;i<props.metadataFields.length;i++)\n//     {\n//         console.log(props.metadataFields)\n//         option1.push({\n//             value:props.metadataFields[i].id,\n//             displayValue:props.metadataFields[i].name\n//         })\n//     }\n// }\n// if (option1.length<2) \n// {\n//     console.log(\"here\")\n//     alert(\"no values present to update\")\n//     props.history.goBack()\n//     window.location.reload(false)\n//     option1.push(\n//         {\n//             value:null,\n//            displayValue:null\n//         }\n//     )\n    \n// }\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        metadataFields: {\n            elementType: 'select',\n            elementConfig: {\n                options: ''\n            },\n            value: '',\n            validation: {},\n            valid: true\n        },\n        categoryMetadataFieldValues: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataFieldValues',\n                placeholder: 'your categoryMetadataFieldValues'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n\n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    \n    return {\n        error: state.category.error,\n        categoriesForAdmin:state.category.categoriesForAdmin,\n        metadataFields:state.category.metadataFields,\n        id:state.category.id,\n        category:state.category.category\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: ()=>dispatch(actions.getAllCategoriesForAdmin()),\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)\n"]},"metadata":{},"sourceType":"module"}