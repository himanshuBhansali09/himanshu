{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/Category.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst Category = props => {\n  let option = [];\n\n  if (props.category !== null) {\n    for (let i = 0; i < props.category.length; i++) {\n      console.log(props.category[i]);\n      option.push({\n        value: props.category[i].name,\n        displayValue: props.category[i].name\n      });\n    }\n\n    let option1 = [];\n\n    if (props.metadataFields !== null) {\n      for (let i = 0; i < props.metadataFields.length; i++) {\n        option.push({\n          value: props.metadataFields[i].name,\n          displayValue: props.metadataFields[i].name\n        });\n      }\n    }\n\n    const [authForm, setAuthForm] = useState({\n      category: {\n        elementType: 'select',\n        elementConfig: {\n          options: option\n        },\n        value: option[0].value,\n        validation: {},\n        valid: true\n      },\n      metadataFields: {\n        elementType: 'select',\n        elementConfig: {\n          options: option1\n        },\n        value: option1[0].value,\n        validation: {},\n        valid: true\n      },\n      categoryMetadataField: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'categoryMetadataField',\n          placeholder: 'your categoryMetadataField'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    });\n\n    if (props.passwordChangeSuccessful) {\n      if (localStorage.getItem('roleName') === \"ROLE_CUSTOMER\") {\n        props.history.push(\"/account\");\n      } else {\n        props.history.push(\"/sellerAccount\");\n      }\n    }\n\n    const registerHandler = event => {\n      event.preventDefault();\n      props.onSetPassword(authForm);\n    };\n\n    const inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...authForm,\n        [controlName]: { ...authForm[controlName],\n          value: event.target.value,\n          valid: checkValidity(event.target.value, authForm[controlName].validation),\n          touched: true\n        }\n      };\n      setAuthForm(updatedControls);\n    };\n\n    const formElementsArray = [];\n\n    for (let key in authForm) {\n      formElementsArray.push({\n        id: key,\n        config: authForm[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => inputChangedHandler(event, formElement.id),\n      touched: formElement.config.touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: registerHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, form, /*#__PURE__*/React.createElement(\"button\", {\n      className: classes.Button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Submit\")));\n  }\n};\n\nconst mapStateToProps = state => {\n  console.log(state.category.category);\n  return {\n    error: state.category.error,\n    category: state.category.category,\n    metadataFields: state.category.metadataFields\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory()),\n    onClicked1: () => dispatch(actions.viewCategoryMetadataField)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Category);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/Category.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","Category","props","option","category","i","length","console","log","push","value","name","displayValue","option1","metadataFields","authForm","setAuthForm","elementType","elementConfig","options","validation","valid","categoryMetadataField","type","placeholder","required","minLength","touched","passwordChangeSuccessful","localStorage","getItem","history","registerHandler","event","preventDefault","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","mapDispatchToProps","dispatch","onClicked","getCategory","onClicked1","viewCategoryMetadataField"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst Category = props => {\n\n    let option=[]\n    if(props.category!==null)\n    {\n    for(let i=0;i<props.category.length;i++)\n    {\n        console.log(props.category[i])\n        option.push({\n            value:props.category[i].name,\n            displayValue:props.category[i].name\n        })\n    }\n    let option1=[]\n    if(props.metadataFields!==null)\n    {\n    for(let i=0;i<props.metadataFields.length;i++)\n    {\n        option.push({\n            value:props.metadataFields[i].name,\n            displayValue:props.metadataFields[i].name\n        })\n    }\n}\n\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        metadataFields: {\n            elementType: 'select',\n            elementConfig: {\n                options: option1\n            },\n            value: option1[0].value,\n            validation: {},\n            valid: true\n        },\n        categoryMetadataField: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataField',\n                placeholder: 'your categoryMetadataField'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n    if (props.passwordChangeSuccessful) {\n        if (localStorage.getItem('roleName') === \"ROLE_CUSTOMER\") {\n            props.history.push(\"/account\")\n        }\n        else {\n            props.history.push(\"/sellerAccount\")\n        }\n    }\n\n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onSetPassword(authForm);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n}\nconst mapStateToProps = state => {\n    console.log(state.category.category)\n    return {\n        error: state.category.error,\n        category: state.category.category,\n        metadataFields:state.category.metadataFields\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory()),\n        onClicked1:()=>dispatch(actions.viewCategoryMetadataField)\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Category)\n"]},"metadata":{},"sourceType":"module"}