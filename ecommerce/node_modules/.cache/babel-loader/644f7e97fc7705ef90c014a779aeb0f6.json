{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Customer/CustomerAddress/UpdateAddress.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../Ui/Backdrop/Input/Input';\nimport classes from '../../Login/login.module.css';\nimport { checkValidity, updateObject } from '../../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\n\nconst UpdateAddress = props => {\n  const {\n    onClicked\n  } = props;\n  useEffect(() => {\n    async function anyNameFunction() {\n      await onClicked();\n    }\n\n    anyNameFunction();\n  }, [onClicked]);\n  let newAddress = null;\n  newAddress = props.address.filter(address => address.id === props.id);\n  console.log('new address', newAddress);\n  const [authForm, setAuthForm] = useState({\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'city',\n        placeholder: 'your city'\n      },\n      value: newAddress[0].city,\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    state: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'state',\n        placeholder: 'your state'\n      },\n      value: newAddress[0].state,\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'country',\n        placeholder: 'your country'\n      },\n      value: newAddress[0].country,\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    zipcode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'zipcode',\n        placeholder: 'your zipcode'\n      },\n      value: newAddress[0].zipcode,\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    addressLine: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'addressLine',\n        placeholder: 'your addressLine'\n      },\n      value: newAddress[0].addressLine,\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onupdate(authForm);\n\n    if (props.addedSuccessfully) {\n      props.history.push(\"/addresses\");\n    }\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 18\n    }\n  }, \"Submit\"))));\n};\n\nconst mapStateToProps = state => {\n  console.log('id is' + state.address.id);\n  return {\n    address: state.address.address,\n    addedSuccessfully: state.address.addedSuccessfully,\n    id: state.address.id\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getAddress()),\n    onupdate: formData => dispatch(actions.updateAddressOfCustomer(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateAddress);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Customer/CustomerAddress/UpdateAddress.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","connect","actions","UpdateAddress","props","onClicked","anyNameFunction","newAddress","address","filter","id","console","log","authForm","setAuthForm","city","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","state","country","minLength","zipcode","addressLine","submitHandler","event","preventDefault","onupdate","addedSuccessfully","history","push","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","map","formElement","Auth","Button","mapStateToProps","mapDispatchToProps","dispatch","getAddress","formData","updateAddressOfCustomer"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../Ui/Backdrop/Input/Input';\nimport classes from '../../Login/login.module.css';\nimport {checkValidity,updateObject} from '../../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nconst UpdateAddress = props => {\n    const {onClicked}=props\n    useEffect(()=>{\n        async function anyNameFunction() {\n            await onClicked();\n          }\n          anyNameFunction();\n    },[onClicked]) \n    \n    let newAddress=null\n    newAddress = props.address.filter(address=>address.id===props.id);\n\n    console.log('new address', newAddress);\n    \n    const[authForm,setAuthForm] =  useState({\n            city:{\n                elementType:'input',\n                elementConfig:{\n                    type:'city',\n                    placeholder:'your city'\n                },\n                value:newAddress[0].city,\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            state:{\n                elementType:'input',\n                elementConfig:{\n                    type:'state',\n                    placeholder:'your state'\n                },\n                value:newAddress[0].state,\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'country',\n                    placeholder:'your country'\n                },\n                value:newAddress[0].country,\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            zipcode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'zipcode',\n                    placeholder:'your zipcode'\n                },\n                value:newAddress[0].zipcode,\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            addressLine:{\n                elementType:'input',\n                elementConfig:{\n                    type:'addressLine',\n                    placeholder:'your addressLine'\n                },\n                value:newAddress[0].addressLine,\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })      \n\n        const submitHandler=(event)=>{\n            event.preventDefault();\n            props.onupdate(authForm)\n            if (props.addedSuccessfully) {\n                props.history.push(\"/addresses\")\n            }\n\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        let form = formElementsArray.map(formElement=>(\n           \n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n       \n        return (\n            <React.Fragment>\n            <div className={classes.Auth}>\n               \n                <form onSubmit={submitHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n                \n            </div>\n             </React.Fragment>\n        )\n        \n        }\n        const mapStateToProps = state=>{\n            console.log('id is'+state.address.id)\n            return{\n                address:state.address.address,\n                addedSuccessfully:state.address.addedSuccessfully,\n                id:state.address.id\n            }\n        }\n        \n        const mapDispatchToProps = dispatch =>{\n            return{\n                onClicked: ()=>dispatch(actions.getAddress()),\n                onupdate:(formData)=>dispatch(actions.updateAddressOfCustomer(formData))\n                }\n        }\nexport default connect(mapStateToProps,mapDispatchToProps)(UpdateAddress)\n"]},"metadata":{},"sourceType":"module"}