{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Customer/CustomerAddress/AddNewAddress.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../Ui/Backdrop/Input/Input';\nimport classes from '../../Login/login.module.css';\nimport { checkValidity, updateObject } from '../../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\n\nconst AddNewAddress = props => {\n  const {\n    onClicked\n  } = props;\n  useEffect(() => {\n    onClicked();\n  }, [onClicked]);\n  const [authForm, setAuthForm] = useState({\n    city: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'city',\n        placeholder: 'your city'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    state: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'middleName',\n        placeholder: 'your middleName'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'lastName',\n        placeholder: 'your lastName'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    zipcode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'contactNo',\n        placeholder: 'your contactNo'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    addressLine: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'addressLine',\n        placeholder: 'your addressLine'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAdd(authForm);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 18\n    }\n  }, \"Submit\"))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    address: state.address.address\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getAddress()),\n    onAdd: formData => dispatch(actions.addNewAddress(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNewAddress);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Customer/CustomerAddress/AddNewAddress.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","connect","actions","AddNewAddress","props","onClicked","authForm","setAuthForm","city","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","state","country","minLength","zipcode","addressLine","submitHandler","event","preventDefault","onAdd","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","push","id","config","form","map","formElement","Auth","Button","mapStateToProps","address","mapDispatchToProps","dispatch","getAddress","formData","addNewAddress"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../Ui/Backdrop/Input/Input';\nimport classes from '../../Login/login.module.css';\nimport {checkValidity,updateObject} from '../../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../store/actions/index';\nconst AddNewAddress = props => {\n    const {onClicked}=props\n    useEffect(()=>{\n        onClicked()\n    },[onClicked])\n    \n    const[authForm,setAuthForm] =  useState({\n            city:{\n                elementType:'input',\n                elementConfig:{\n                    type:'city',\n                    placeholder:'your city'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            state:{\n                elementType:'input',\n                elementConfig:{\n                    type:'middleName',\n                    placeholder:'your middleName'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            country:{\n                elementType:'input',\n                elementConfig:{\n                    type:'lastName',\n                    placeholder:'your lastName'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            zipcode:{\n                elementType:'input',\n                elementConfig:{\n                    type:'contactNo',\n                    placeholder:'your contactNo'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            addressLine:{\n                elementType:'input',\n                elementConfig:{\n                    type:'addressLine',\n                    placeholder:'your addressLine'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n\n        const submitHandler=(event)=>{\n            event.preventDefault();\n            props.onAdd(authForm)\n            \n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        let form = formElementsArray.map(formElement=>(\n           \n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n       \n        return (\n            <React.Fragment>\n            <div className={classes.Auth}>\n               \n                <form onSubmit={submitHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n                \n            </div>\n             </React.Fragment>\n        )\n        \n        }\n        const mapStateToProps = state=>{\n            return{\n                address:state.address.address\n            }\n        }\n        \n        const mapDispatchToProps = dispatch =>{\n            return{\n                onClicked: ()=>dispatch(actions.getAddress()),\n                onAdd:(formData)=>dispatch(actions.addNewAddress(formData))\n                }\n        }\nexport default connect(mapStateToProps,mapDispatchToProps)(AddNewAddress)\n"]},"metadata":{},"sourceType":"module"}