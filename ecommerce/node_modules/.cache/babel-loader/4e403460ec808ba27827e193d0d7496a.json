{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/ProductVariation/AddProductVariation.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Checkbox from '../Ui/Backdrop/Checkbox';\n\nconst AddProductVariation = props => {\n  let items = [];\n\n  if (props.singleproductForSeller !== null) {\n    for (let i = 0; i < props.singleproductForSeller.fieldName.length; i++) {\n      items.push(props.singleproductForSeller.fieldName[i]);\n    }\n  }\n\n  console.log(items);\n\n  if (items.length > 0) {\n    items.map(name => {\n      /*#__PURE__*/\n      React.createElement(Checkbox, {\n        label: name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      });\n    });\n  }\n\n  const [authForm, setAuthForm] = useState({\n    quantity_available: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'quantity_available',\n        placeholder: 'quantity_available'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    price: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'price',\n        placeholder: 'your price'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.addedSuccessfully) {\n    props.history.push(\"/viewCategoriesForSeller\");\n  }\n\n  const Handler = event => {\n    event.preventDefault();\n    props.onFormSubmit(authForm, props.id);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 6\n    }\n  }, formElement.id), /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: Handler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, form, items.map(name => {\n    /*#__PURE__*/\n    React.createElement(Checkbox, {\n      label: name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    });\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 14\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, props.error));\n};\n\nconst mapStateToProps = state => {\n  return {\n    singleproductForSeller: state.product.singleproductForSeller\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFormSubmit: (formData, id) => dispatch(actions.addProduct(formData, id))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProductVariation);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/ProductVariation/AddProductVariation.js"],"names":["React","useState","Input","classes","checkValidity","updateObject","actions","connect","Checkbox","AddProductVariation","props","items","singleproductForSeller","i","fieldName","length","push","console","log","map","name","authForm","setAuthForm","quantity_available","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","price","addedSuccessfully","history","Handler","event","preventDefault","onFormSubmit","id","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","formElement","Auth","Button","color","error","mapStateToProps","state","product","mapDispatchToProps","dispatch","formData","addProduct"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Checkbox from '../Ui/Backdrop/Checkbox';\n\nconst AddProductVariation =(props)=> {\n\n    let items=[]\n\n    if(props.singleproductForSeller!==null)\n    {\n        for(let i=0;i<props.singleproductForSeller.fieldName.length;i++)\n        {\n          items.push(\n              props.singleproductForSeller.fieldName[i]\n              )\n        }\n    }\n    console.log(items)\n    if(items.length>0)\n    {\n        items.map(name=>{\n            <Checkbox label={name}/>\n        }\n        )\n    }\n\n\n    const[authForm,setAuthForm] =  useState({\n        quantity_available:{\n            elementType:'input',\n            elementConfig:{\n                type:'quantity_available',\n                placeholder:'quantity_available'\n            },\n            value:'',\n            validation:{\n                required:true,\n                minLength: 6\n            },\n            valid : false,\n            touched:false\n        },\n        price:{\n            elementType:'input',\n            elementConfig:{\n                type:'price',\n                placeholder:'your price'\n            },\n            value:'',\n            validation:{\n                required:true,\n                minLength: 6\n            },\n            valid : false,\n            touched:false\n        }\n        \n    })\n\n    if(props.addedSuccessfully)\n    {\n        props.history.push(\"/viewCategoriesForSeller\")\n    }\n    \n    const Handler=(event)=>{\n        event.preventDefault();\n        props.onFormSubmit(authForm,props.id);\n    }\n\n const inputChangedHandler = (event,controlName)=>{\n    const updatedControls = {\n        ...authForm,\n        [controlName]: {\n            ...authForm[controlName],\n            value: event.target.value,\n            valid: checkValidity(event.target.value,authForm[controlName].validation),\n            \n            touched:true\n        }\n    };\n    setAuthForm(updatedControls);\n}\n\n    const formElementsArray=[];\n    for(let key in authForm){\n        formElementsArray.push({\n            id:key,\n            config:authForm[key]\n\n        })\n    }\n\n    \n    let form = formElementsArray.map(formElement=>(\n     <>\n     <label>{formElement.id}</label>\n        <Input\n        key = {formElement.id}\n        elementType={formElement.config.elementType}\n        elementConfig={formElement.config.elementConfig}\n        value={formElement.config.value}\n        changed={(event)=>inputChangedHandler(event,formElement.id)}\n        touched={formElement.config.touched}\n        />\n        </>\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={Handler}>\n             {form}\n    {\n     \n        items.map(name=>{\n            <Checkbox label={name}/>\n        }\n        )\n    }\n             <button className={classes.Button}>Submit</button>\n            </form>\n            <h2 style={{color:\"red\"}}>{props.error}</h2>\n            \n        </div>\n    )\n    \n    }\n\nconst mapStateToProps = state => {\n    return {\n        singleproductForSeller: state.product.singleproductForSeller\n    }\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFormSubmit: (formData,id) => dispatch(actions.addProduct(formData,id))\n        \n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AddProductVariation)\n"]},"metadata":{},"sourceType":"module"}