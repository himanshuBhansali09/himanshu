{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Register/Register.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst Register = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    firstName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'firstName',\n        placeholder: 'your firstName'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    lastName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'lastName',\n        placeholder: 'your lastName'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    contactNumber: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'contactNumber',\n        placeholder: 'your contactNumber'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    confirmpassword: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your confirmpassword'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.registerSuccessful) {\n    props.history.push(\"/emailSent\");\n  }\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onRegister(authForm.email.value, authForm.firstName.value, authForm.lastName.value, authForm.password.value, authForm.confirmpassword.value, authForm.contactNumber.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, formElement.id), /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 18\n    }\n  }, \"Register\")), /*#__PURE__*/React.createElement(\"h5\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 16\n    }\n  }, props.error));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.register.error,\n    registerSuccessful: state.register.registerSuccessful\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onRegister: (email, firstName, lastName, password, confirmPassword, contactNumber) => dispatch(actions.register(email, firstName, lastName, password, confirmPassword, contactNumber))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Register/Register.js"],"names":["React","useState","Input","classes","checkValidity","actions","connect","Register","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","firstName","lastName","contactNumber","password","minLength","confirmpassword","registerSuccessful","history","push","registerHandler","event","preventDefault","onRegister","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","color","error","mapStateToProps","state","register","mapDispatchToProps","dispatch","confirmPassword"],"mappings":"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","sourcesContent":["import React, { useState} from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport {checkValidity} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst Register = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            firstName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'firstName',\n                    placeholder:'your firstName'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            lastName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'lastName',\n                    placeholder:'your lastName'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                },\n                valid : false,\n                touched:false\n            },\n            contactNumber:{\n                elementType:'input',\n                elementConfig:{\n                    type:'contactNumber',\n                    placeholder:'your contactNumber'\n                },\n                value:'',\n                validation:{\n                    required:true\n                },\n                valid : false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            confirmpassword:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your confirmpassword'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        if(props.registerSuccessful)\n        {\n            props.history.push(\"/emailSent\")\n        }\n\n        const registerHandler=(event)=>{\n            event.preventDefault();\n            props.onRegister(authForm.email.value,authForm.firstName.value,authForm.lastName.value,authForm.password.value,authForm.confirmpassword.value,authForm.contactNumber.value);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n    \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <>\n            <label>{formElement.id}</label>\n            <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n        />\n            </>\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={registerHandler}>\n                 {form}\n                 <button className={classes.Button}>Register</button>\n                </form>\n               <h5 style={{color:\"red\"}}>{props.error}</h5>\n            </div>\n        )\n        \n        }\n\n\nconst mapStateToProps = state=>{\n    return{\n        error:state.register.error,\n        registerSuccessful:state.register.registerSuccessful\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onRegister: (email,firstName,lastName,password,confirmPassword,contactNumber)=>dispatch(actions.register(email,firstName,lastName,password,confirmPassword,contactNumber))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Register)\n"]},"metadata":{},"sourceType":"module"}