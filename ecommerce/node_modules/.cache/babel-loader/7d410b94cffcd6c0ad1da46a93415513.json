{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst UpdateMetadataValues = props => {\n  useEffect(() => {\n    a(authForm.category.value);\n  }, [authForm.category.value]);\n  let option = [];\n\n  if (props.category !== null) {\n    for (let i = 0; i < props.category.length; i++) {\n      console.log(props.category[i]);\n      option.push({\n        value: props.category[i].id,\n        displayValue: props.category[i].name\n      });\n    }\n  }\n\n  let metaid = [];\n  let option1 = [];\n\n  if (props.metadataFields !== null) {\n    for (let i = 0; i < props.metadataFields.length; i++) {\n      console.log(props.metadataFields);\n      option1.push({\n        value: props.metadataFields[i].id,\n        displayValue: props.metadataFields[i].name\n      });\n    }\n  }\n\n  console.log(\"before auth\", metaid);\n  const [authForm, setAuthForm] = useState({\n    category: {\n      elementType: 'select',\n      elementConfig: {\n        options: option\n      },\n      value: option[0].value,\n      validation: {},\n      valid: true\n    },\n    metadataFields: {\n      elementType: 'select',\n      elementConfig: {\n        options: metaid\n      },\n      value: option1[0].value,\n      validation: {},\n      valid: true\n    },\n    categoryMetadataField: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryMetadataField',\n        placeholder: 'your categoryMetadataFieldValues'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const a = id => {\n    metaid = [];\n    console.log(\"id is\", id);\n\n    for (let i = 0; i < props.metadataFields.length; i++) {\n      for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n        console.log(\"id inside\", props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid);\n        console.log(\"id received\", id);\n        let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid;\n\n        if (a == id) {\n          metaid.push({\n            value: props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n            displayValue: props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid\n          });\n        }\n      }\n    }\n\n    console.log(\"metaid is\", metaid);\n  };\n\n  console.log(document.referrer, \"props\");\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onAdd(authForm.category.value, authForm.metadataFields.value, authForm.categoryMetadataField.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.category.error,\n    category: state.category.category,\n    metadataFields: state.category.metadataFields\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory()),\n    onClicked1: () => dispatch(actions.viewCategoryMetadataField),\n    onAdd: (id1, id2, values) => dispatch(actions.add(id1, id2, values))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","actions","connect","UpdateMetadataValues","props","a","authForm","category","value","option","i","length","console","log","push","id","displayValue","name","metaid","option1","metadataFields","setAuthForm","elementType","elementConfig","options","validation","valid","categoryMetadataField","type","placeholder","required","minLength","touched","j","categoryMetadataFieldValues","categoryMetadataFieldValuesId","cid","mid","document","referrer","registerHandler","event","preventDefault","onAdd","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","mapDispatchToProps","dispatch","onClicked","getCategory","onClicked1","viewCategoryMetadataField","id1","id2","values","add"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst UpdateMetadataValues = props => {\n\n\n    useEffect(()=>{\n        a(authForm.category.value)\n           },[authForm.category.value])\n       \n\n    let option=[]\n    if(props.category!==null)\n    {\n    for(let i=0;i<props.category.length;i++)\n    {\n        console.log(props.category[i])\n        option.push({\n            value:props.category[i].id,\n            displayValue:props.category[i].name\n        })\n    }\n}\nlet metaid = [];\n    let option1=[]\n    if(props.metadataFields!==null)\n    {\n    for(let i=0;i<props.metadataFields.length;i++)\n    {\n        console.log(props.metadataFields)\n        option1.push({\n            value:props.metadataFields[i].id,\n            displayValue:props.metadataFields[i].name\n        })\n    }\n}\n\nconsole.log(\"before auth\",metaid)\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        metadataFields: {\n            elementType: 'select',\n            elementConfig: {\n                options: metaid\n            },\n            value: option1[0].value,\n            validation: {},\n            valid: true\n        },\n        categoryMetadataField: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataField',\n                placeholder: 'your categoryMetadataFieldValues'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n    const a=(id)=>{\n        metaid=[]\n        console.log(\"id is\",id)\n        for (let i = 0; i < props.metadataFields.length; i++) {\n            for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n                console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n                console.log(\"id received\",id)\n                let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n                if(a==id)\n                {\n                    \n                    metaid.push({\n                        value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n            displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n                        )\n                }\n            }\n        }\n        console.log(\"metaid is\",metaid)\n    }\n\n  \n    console.log(document.referrer,\"props\")\n\n    \n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    \n    return {\n        error: state.category.error,\n        category: state.category.category,\n        metadataFields:state.category.metadataFields\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory()),\n        onClicked1:()=>dispatch(actions.viewCategoryMetadataField),\n        onAdd:(id1,id2,values)=>dispatch(actions.add(id1,id2,values))\n\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)\n"]},"metadata":{},"sourceType":"module"}