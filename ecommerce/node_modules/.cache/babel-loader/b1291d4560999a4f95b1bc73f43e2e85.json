{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/AddCategory.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst AddCategory = props => {\n  const [authForm, setAuthForm] = useState({\n    categoryName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryName',\n        placeholder: 'your categoryName'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onSetPassword(authForm);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 18\n    }\n  }, \"Submit\")));\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmit: () => dispatch(actions.addCategory())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddCategory);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/AddCategory.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","AddCategory","props","authForm","setAuthForm","categoryName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","registerHandler","event","preventDefault","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","push","id","config","form","map","formElement","Auth","Button","mapDispatchToProps","dispatch","onSubmit","addCategory","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './changePassword.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst AddCategory = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            categoryName:{\n                elementType:'input',\n                elementConfig:{\n                    type:'categoryName',\n                    placeholder:'your categoryName'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        \n        const registerHandler=(event)=>{\n            event.preventDefault();\n            props.onSetPassword(authForm);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n    \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={registerHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n            </div>\n        )\n        \n        }\n\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onSubmit: ()=>dispatch(actions.addCategory())\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(AddCategory)\n"]},"metadata":{},"sourceType":"module"}