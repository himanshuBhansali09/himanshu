{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n  console.log('auth success');\n  return {\n    type: actionTypes.AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  console.log('auth success');\n  return {\n    type: actionTypes.AUTH_SUCCESS,\n    token: token\n  };\n};\nexport const authFail = error => {\n  console.log('auth success');\n  return {\n    type: actionTypes.AUTH_FAIL,\n    error: error\n  };\n}; // export const logOut = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('expirationDate');\n//     localStorage.removeItem('userId')\n//     return {\n//         type: actionTypes.AUTH_LOGOUT\n//     }\n// }\n// export const checkAuthTimeout = (expirationTime) => {\n//     return dispatch => {\n//         setTimeout(() => {\n//             dispatch(logOut());\n//         }, expirationTime * 1000);\n//     };\n// };\n\nexport const auth = (email, password) => {\n  return dispatch => {\n    dispatch(authStart());\n    var bodyFormData = new FormData();\n    bodyFormData.set(\"grant_type\", \"password\");\n    bodyFormData.append(\"client_id\", \"live-test\");\n    bodyFormData.append(\"username\", email);\n    bodyFormData.append(\"password\", password);\n    bodyFormData.append(\"client_secret\", \"abcde\"); // axios.post(url, authData)\n    //     .then(response => {\n    //         console.log(response);\n    //         const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    //         localStorage.setItem('token', response.data.idToken);\n    //         localStorage.setItem('expirationDate', expirationDate)\n    //         localStorage.setItem('userId',response.data.localId)\n    //         dispatch(authSuccess(response.data.idToken, response.data.localId));\n    //         dispatch(checkAuthTimeout(response.data.expiresIn))\n    //     })\n    //     .catch(err => {\n    //         console.log(err);\n    //         dispatch(authFail(err.response.data.error));\n    //     })\n\n    axios.post(\"/oauth/token\", bodyFormData).then(response => {\n      // console.log(this.state);\n      // this.setState({ isLoading: false, groups: response.data.greetings });\n      localStorage.setItem('token', response.data.access_token);\n      dispatch(authSuccess(response.data.access_token));\n      return console.log(response.data);\n    });\n  };\n};\nexport const setAuthRedirectPath = path => {\n  return {\n    type: actionTypes.SET_AUTH_REDIRECT_PATH,\n    path: path\n  };\n}; // export const authCheckState = () => {\n//     return dispatch => {\n//         const token = localStorage.getItem('token');\n//         if (!token) {\n//             dispatch(logOut());\n//         } else {\n//             const expirationDate = new Date(localStorage.getItem('expirationDate'));\n//             if (expirationDate <= new Date()) {\n//                 dispatch(logOut());\n//             } else {\n//                 const userId = localStorage.getItem('userId');\n//                 dispatch(authSuccess(token, userId));\n//                 console.log((expirationDate.getTime() - new Date().getTime()) / 1000 )\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n//             }   \n//         }\n//     };\n// };","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/store/actions/auth.js"],"names":["actionTypes","axios","authStart","console","log","type","AUTH_START","authSuccess","token","userId","AUTH_SUCCESS","authFail","error","AUTH_FAIL","auth","email","password","dispatch","bodyFormData","FormData","set","append","post","then","response","localStorage","setItem","data","access_token","setAuthRedirectPath","path","SET_AUTH_REDIRECT_PATH"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM;AADf,GAAP;AAGH,CALM;AAOP,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1CN,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACU,YADf;AAEHF,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAKH,CAPM;AASP,OAAO,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC/BT,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACa,SADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAKH,CAPM,C,CASP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAME,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACrC,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACf,SAAS,EAAV,CAAR;AACA,QAAIgB,YAAY,GAAG,IAAIC,QAAJ,EAAnB;AACAD,IAAAA,YAAY,CAACE,GAAb,CAAiB,YAAjB,EAA+B,UAA/B;AACAF,IAAAA,YAAY,CAACG,MAAb,CAAoB,WAApB,EAAiC,WAAjC;AACAH,IAAAA,YAAY,CAACG,MAAb,CAAoB,UAApB,EAAgCN,KAAhC;AACAG,IAAAA,YAAY,CAACG,MAAb,CAAoB,UAApB,EAAgCL,QAAhC;AACAE,IAAAA,YAAY,CAACG,MAAb,CAAoB,eAApB,EAAqC,OAArC,EAPe,CASf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACApB,IAAAA,KAAK,CAACqB,IAAN,CAAW,cAAX,EAA2BJ,YAA3B,EAAyCK,IAAzC,CAA+CC,QAAD,IAAc;AACxD;AACA;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA6BF,QAAQ,CAACG,IAAT,CAAcC,YAA3C;AACAX,MAAAA,QAAQ,CAACV,WAAW,CAACiB,QAAQ,CAACG,IAAT,CAAcC,YAAf,CAAZ,CAAR;AACA,aAAOzB,OAAO,CAACC,GAAR,CAAYoB,QAAQ,CAACG,IAArB,CAAP;AACC,KANL;AAOH,GA9BD;AA+BH,CAhCM;AAkCP,OAAO,MAAME,mBAAmB,GAAIC,IAAD,IACnC;AACI,SAAO;AACHzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B,sBADf;AAEHD,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CANM,C,CAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const authStart = () => {\n    console.log('auth success')\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token, userId) => {\n    console.log('auth success')\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    \n    }\n}\n\nexport const authFail = (error) => {\n    console.log('auth success')\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n\n}\n\n// export const logOut = () => {\n//     localStorage.removeItem('token');\n//     localStorage.removeItem('expirationDate');\n//     localStorage.removeItem('userId')\n//     return {\n//         type: actionTypes.AUTH_LOGOUT\n//     }\n// }\n\n// export const checkAuthTimeout = (expirationTime) => {\n//     return dispatch => {\n//         setTimeout(() => {\n//             dispatch(logOut());\n//         }, expirationTime * 1000);\n//     };\n// };\n\nexport const auth = (email, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        var bodyFormData = new FormData();\n        bodyFormData.set(\"grant_type\", \"password\");\n        bodyFormData.append(\"client_id\", \"live-test\");\n        bodyFormData.append(\"username\", email);\n        bodyFormData.append(\"password\", password);\n        bodyFormData.append(\"client_secret\", \"abcde\");\n    \n        // axios.post(url, authData)\n        //     .then(response => {\n        //         console.log(response);\n        //         const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n        //         localStorage.setItem('token', response.data.idToken);\n        //         localStorage.setItem('expirationDate', expirationDate)\n        //         localStorage.setItem('userId',response.data.localId)\n        //         dispatch(authSuccess(response.data.idToken, response.data.localId));\n        //         dispatch(checkAuthTimeout(response.data.expiresIn))\n        //     })\n        //     .catch(err => {\n        //         console.log(err);\n        //         dispatch(authFail(err.response.data.error));\n        //     })\n        axios.post(\"/oauth/token\", bodyFormData).then((response) => {\n            // console.log(this.state);\n            // this.setState({ isLoading: false, groups: response.data.greetings });\n            localStorage.setItem('token',response.data.access_token)\n            dispatch(authSuccess(response.data.access_token));\n            return console.log(response.data);\n            });\n    }\n}\n\nexport const setAuthRedirectPath = (path) => \n{\n    return {\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\n        path: path\n    }\n}\n\n// export const authCheckState = () => {\n//     return dispatch => {\n//         const token = localStorage.getItem('token');\n//         if (!token) {\n//             dispatch(logOut());\n//         } else {\n//             const expirationDate = new Date(localStorage.getItem('expirationDate'));\n//             if (expirationDate <= new Date()) {\n//                 dispatch(logOut());\n//             } else {\n//                 const userId = localStorage.getItem('userId');\n//                 dispatch(authSuccess(token, userId));\n//                 console.log((expirationDate.getTime() - new Date().getTime()) / 1000 )\n//                 dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000 ));\n//             }   \n//         }\n//     };\n// };"]},"metadata":{},"sourceType":"module"}