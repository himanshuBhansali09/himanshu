{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/Category.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst Category = props => {\n  let option = [];\n\n  if (props.category !== null) {\n    for (let i = 0; i < props.category.length; i++) {\n      console.log(props.category[i]);\n      option.push({\n        value: props.category[i].name,\n        displayValue: props.category[i].name\n      });\n    } //     let option1=[]\n    //     if(props.metadataFields!==null)\n    //     {\n    //     for(let i=0;i<props.metadataFields.length;i++)\n    //     {\n    //         option.push({\n    //             value:props.metadataFields[i].name,\n    //             displayValue:props.metadataFields[i].name\n    //         })\n    //     }\n    // }\n\n\n    const [authForm, setAuthForm] = useState({\n      category: {\n        elementType: 'select',\n        elementConfig: {\n          options: option\n        },\n        value: option[0].value,\n        validation: {},\n        valid: true\n      },\n      metadataFields: {\n        elementType: 'select',\n        elementConfig: {\n          options: option1\n        },\n        value: option1[0].value,\n        validation: {},\n        valid: true\n      },\n      categoryMetadataField: {\n        elementType: 'input',\n        elementConfig: {\n          type: 'categoryMetadataField',\n          placeholder: 'your categoryMetadataField'\n        },\n        value: '',\n        validation: {\n          required: true,\n          minLength: 6\n        },\n        valid: false,\n        touched: false\n      }\n    });\n\n    const registerHandler = event => {\n      event.preventDefault();\n      props.onSetPassword(authForm);\n    };\n\n    const inputChangedHandler = (event, controlName) => {\n      const updatedControls = { ...authForm,\n        [controlName]: { ...authForm[controlName],\n          value: event.target.value,\n          valid: checkValidity(event.target.value, authForm[controlName].validation),\n          touched: true\n        }\n      };\n      setAuthForm(updatedControls);\n    };\n\n    const formElementsArray = [];\n\n    for (let key in authForm) {\n      formElementsArray.push({\n        id: key,\n        config: authForm[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => inputChangedHandler(event, formElement.id),\n      touched: formElement.config.touched,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }\n    }));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.Auth,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: registerHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, form, /*#__PURE__*/React.createElement(\"button\", {\n      className: classes.Button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, \"Submit\")));\n  }\n};\n\nconst mapStateToProps = state => {\n  console.log(state.category.category);\n  return {\n    error: state.category.error,\n    category: state.category.category,\n    metadataFields: state.category.metadataFields\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory()),\n    onClicked1: () => dispatch(actions.viewCategoryMetadataField)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Category);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/Category.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","Category","props","option","category","i","length","console","log","push","value","name","displayValue","authForm","setAuthForm","elementType","elementConfig","options","validation","valid","metadataFields","option1","categoryMetadataField","type","placeholder","required","minLength","touched","registerHandler","event","preventDefault","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","mapDispatchToProps","dispatch","onClicked","getCategory","onClicked1","viewCategoryMetadataField"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst Category = props => {\n\n    let option=[]\n    if(props.category!==null)\n    {\n    for(let i=0;i<props.category.length;i++)\n    {\n        console.log(props.category[i])\n        option.push({\n            value:props.category[i].name,\n            displayValue:props.category[i].name\n        })\n    }\n//     let option1=[]\n//     if(props.metadataFields!==null)\n//     {\n//     for(let i=0;i<props.metadataFields.length;i++)\n//     {\n//         option.push({\n//             value:props.metadataFields[i].name,\n//             displayValue:props.metadataFields[i].name\n//         })\n//     }\n// }\n\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        metadataFields: {\n            elementType: 'select',\n            elementConfig: {\n                options: option1\n            },\n            value: option1[0].value,\n            validation: {},\n            valid: true\n        },\n        categoryMetadataField: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataField',\n                placeholder: 'your categoryMetadataField'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n   \n\n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onSetPassword(authForm);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n}\nconst mapStateToProps = state => {\n    console.log(state.category.category)\n    return {\n        error: state.category.error,\n        category: state.category.category,\n        metadataFields:state.category.metadataFields\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory()),\n        onClicked1:()=>dispatch(actions.viewCategoryMetadataField)\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Category)\n"]},"metadata":{},"sourceType":"module"}