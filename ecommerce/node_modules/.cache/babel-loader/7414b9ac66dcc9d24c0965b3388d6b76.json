{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Login/Login.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as actions from '../../store/actions/index';\n\nconst Login = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 8,\n        maxLength: 15\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value);\n  };\n\n  const redirectToSignup = () => {\n    props.history.push(\"/register\");\n  };\n\n  const redirectToSignupAsSeller = () => {\n    props.history.push(\"/registerAsSeller\");\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }));\n\n  if (localStorage.getItem('roleName') === \"ROLE_ADMIN\" || localStorage.getItem('roleName') === \"ROLE_CUSTOMER\" || localStorage.getItem('roleName') === \"ROLE_SELLER\") {\n    props.history.push(\"/\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: () => submitHandler(event),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  }, \"Login\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.MyStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"center\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"             \", /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 38\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, \"New to this site\")), /*#__PURE__*/React.createElement(Link, {\n    to: \"/forgotPassword\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"Forgot Password?\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button1,\n    onClick: redirectToSignup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  }, \"SignUp now as Customer\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button1,\n    onClick: redirectToSignupAsSeller,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, \"SignUp now as Seller\"))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.auth.token !== null,\n    authRedirectPath: state.auth.authRedirectPath,\n    roleName: state.auth.roleName\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, passsword) => dispatch(actions.auth(email, passsword)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Login/Login.js"],"names":["React","useState","Input","classes","checkValidity","connect","Link","withRouter","actions","Login","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","maxLength","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","redirectToSignup","history","push","redirectToSignupAsSeller","formElementsArray","key","id","config","form","map","formElement","localStorage","getItem","Auth","Button","MyStyle","Button1","mapStateToProps","state","isAuthenticated","auth","token","authRedirectPath","roleName","mapDispatchToProps","dispatch","passsword","onSetAuthRedirectPath","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport { Link,withRouter } from 'react-router-dom'\nimport * as actions from '../../store/actions/index';\n\nconst Login = props => {\n\n    const [authForm, setAuthForm] = useState({\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'your email'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'your password'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 8,\n                maxLength:15\n            },\n            valid: false,\n            touched: false\n        }\n    })\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const submitHandler = (event) => {\n        event.preventDefault();\n        props.onAuth(authForm.email.value, authForm.password.value)\n    }\n\n    const redirectToSignup = () => {\n        props.history.push(\"/register\")\n    }\n    const redirectToSignupAsSeller = () => {\n        props.history.push(\"/registerAsSeller\")\n    }\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n        })\n    }\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n        />\n    ))\n    if (localStorage.getItem('roleName')===\"ROLE_ADMIN\"||localStorage.getItem('roleName')===\"ROLE_CUSTOMER\"||localStorage.getItem('roleName')===\"ROLE_SELLER\") {\n        props.history.push(\"/\")\n    }\n\n    return (\n        <React.Fragment>\n            <div className={classes.Auth}>\n                <form onSubmit={()=>submitHandler(event)}>\n                    {form}\n                    <button className={classes.Button}>Login</button>\n                </form>\n\n            </div>\n            <div className={classes.MyStyle}>\n                <center>             <h3>\n                    <label>New to this site</label>\n                </h3>\n                    <Link to=\"/forgotPassword\">Forgot Password?</Link>\n                    <br />\n                    <br />\n                    <button className={classes.Button1} onClick={redirectToSignup}>SignUp now as Customer</button>\n                    <br />\n                    <br />\n                    <button className={classes.Button1} onClick={redirectToSignupAsSeller}>SignUp now as Seller</button>\n\n\n                </center>\n\n            </div>\n        </React.Fragment>\n    )\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        isAuthenticated: state.auth.token !== null,\n        authRedirectPath: state.auth.authRedirectPath,\n        roleName: state.auth.roleName\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, passsword) => dispatch(actions.auth(email, passsword)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login))\n"]},"metadata":{},"sourceType":"module"}