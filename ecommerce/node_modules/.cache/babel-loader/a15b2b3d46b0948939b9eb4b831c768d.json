{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/ChangePassword/ChangePassword.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst ChangePassword = props => {\n  const [authForm, setAuthForm] = useState({\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    confirmPassword: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your confirmpassword'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.passwordChangeSuccessful) {\n    if (localStorage.getItem('roleName') === \"ROLE_CUSTOMER\") {\n      props.history.push(\"/login\");\n    } else {\n      props.history.push(\"/login\");\n    }\n  }\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onSetPassword(authForm);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 18\n    }\n  }, \"Submit\")), /*#__PURE__*/React.createElement(\"h5\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, props.error));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.changePassword.error,\n    passwordChangeSuccessful: state.changePassword.passwordChangeSuccessful\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetPassword: formData => dispatch(actions.changePassword(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/ChangePassword/ChangePassword.js"],"names":["React","useState","Input","classes","checkValidity","actions","connect","ChangePassword","props","authForm","setAuthForm","password","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","confirmPassword","passwordChangeSuccessful","localStorage","getItem","history","push","registerHandler","event","preventDefault","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","color","error","mapStateToProps","state","changePassword","mapDispatchToProps","dispatch","formData"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './changePassword.module.css';\nimport {checkValidity} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst ChangePassword = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            confirmPassword:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your confirmpassword'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        if(props.passwordChangeSuccessful)\n        {\n            if(localStorage.getItem('roleName')===\"ROLE_CUSTOMER\")\n            {  \n            props.history.push(\"/login\") \n            }\n            else{\n                props.history.push(\"/login\")\n            }\n        }\n\n        const registerHandler=(event)=>{\n            event.preventDefault();\n            props.onSetPassword(authForm);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n    \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n        />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={registerHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n                <h5 style={{color:\"red\"}}>{props.error}</h5>\n            </div>\n        )\n        \n        }\n\n\nconst mapStateToProps = state=>{\n    return{\n        error:state.changePassword.error,\n        passwordChangeSuccessful:state.changePassword.passwordChangeSuccessful\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onSetPassword: (formData)=>dispatch(actions.changePassword(formData))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(ChangePassword)\n"]},"metadata":{},"sourceType":"module"}