{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/AddMetadataField.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst AddMetadataField = props => {\n  const [authForm, setAuthForm] = useState({\n    categoryMetadataFieldName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryMetadataFieldName',\n        placeholder: 'your categoryMetadataFieldName'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 0\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onClicked(authForm);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"Submit\")), props.error);\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.category.error,\n    metadataFieldsAddedSuccessfully: state.category.metadataFieldsAddedSuccessfully\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: formData => dispatch(actions.addMetadataField(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMetadataField);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/AddMetadataField.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","AddMetadataField","props","authForm","setAuthForm","categoryMetadataFieldName","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","registerHandler","event","preventDefault","onClicked","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","push","id","config","form","map","formElement","Auth","Button","error","mapStateToProps","state","category","metadataFieldsAddedSuccessfully","mapDispatchToProps","dispatch","formData","addMetadataField"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,0CAAlB;AACA,OAAOC,OAAP,MAAoB,6CAApB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,sBAA5C;AACA,OAAO,KAAKC,OAAZ,MAAyB,2BAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;;AACA,MAAMC,gBAAgB,GAAGC,KAAK,IAAI;AAE9B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC;AACrCY,IAAAA,yBAAyB,EAAE;AACvBC,MAAAA,WAAW,EAAE,OADU;AAEvBC,MAAAA,aAAa,EAAE;AACXC,QAAAA,IAAI,EAAE,2BADK;AAEXC,QAAAA,WAAW,EAAE;AAFF,OAFQ;AAMvBC,MAAAA,KAAK,EAAE,EANgB;AAOvBC,MAAAA,UAAU,EAAE;AACRC,QAAAA,QAAQ,EAAE,IADF;AAERC,QAAAA,SAAS,EAAE;AAFH,OAPW;AAWvBC,MAAAA,KAAK,EAAE,KAXgB;AAYvBC,MAAAA,OAAO,EAAE;AAZc;AADU,GAAD,CAAxC;;AAgBA,QAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACC,cAAN;AACAhB,IAAAA,KAAK,CAACiB,SAAN,CAAgBhB,QAAhB;AACH,GAHD;;AAKA,QAAMiB,mBAAmB,GAAG,CAACH,KAAD,EAAQI,WAAR,KAAwB;AAChD,UAAMC,eAAe,GAAG,EACpB,GAAGnB,QADiB;AAEpB,OAACkB,WAAD,GAAe,EACX,GAAGlB,QAAQ,CAACkB,WAAD,CADA;AAEXX,QAAAA,KAAK,EAAEO,KAAK,CAACM,MAAN,CAAab,KAFT;AAGXI,QAAAA,KAAK,EAAEjB,aAAa,CAACoB,KAAK,CAACM,MAAN,CAAab,KAAd,EAAqBP,QAAQ,CAACkB,WAAD,CAAR,CAAsBV,UAA3C,CAHT;AAKXI,QAAAA,OAAO,EAAE;AALE;AAFK,KAAxB;AAUAX,IAAAA,WAAW,CAACkB,eAAD,CAAX;AACH,GAZD;;AAcA,QAAME,iBAAiB,GAAG,EAA1B;;AACA,OAAK,IAAIC,GAAT,IAAgBtB,QAAhB,EAA0B;AACtBqB,IAAAA,iBAAiB,CAACE,IAAlB,CAAuB;AACnBC,MAAAA,EAAE,EAAEF,GADe;AAEnBG,MAAAA,MAAM,EAAEzB,QAAQ,CAACsB,GAAD;AAFG,KAAvB;AAKH;;AAGD,MAAII,IAAI,GAAGL,iBAAiB,CAACM,GAAlB,CAAsBC,WAAW,iBACxC,oBAAC,KAAD;AACI,IAAA,GAAG,EAAEA,WAAW,CAACJ,EADrB;AAEI,IAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmBtB,WAFpC;AAGI,IAAA,aAAa,EAAEyB,WAAW,CAACH,MAAZ,CAAmBrB,aAHtC;AAII,IAAA,KAAK,EAAEwB,WAAW,CAACH,MAAZ,CAAmBlB,KAJ9B;AAKI,IAAA,OAAO,EAAGO,KAAD,IAAWG,mBAAmB,CAACH,KAAD,EAAQc,WAAW,CAACJ,EAApB,CAL3C;AAMI,IAAA,OAAO,EAAEI,WAAW,CAACH,MAAZ,CAAmBb,OANhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,CAAX;AAWA,sBACI;AAAK,IAAA,SAAS,EAAEnB,OAAO,CAACoC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,QAAQ,EAAEhB,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKa,IADL,eAEI;AAAQ,IAAA,SAAS,EAAEjC,OAAO,CAACqC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ,EAKK/B,KAAK,CAACgC,KALX,CADJ;AAUH,CApED;;AAuEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAE7B,SAAO;AACLF,IAAAA,KAAK,EAACE,KAAK,CAACC,QAAN,CAAeH,KADhB;AAELI,IAAAA,+BAA+B,EAACF,KAAK,CAACC,QAAN,CAAeC;AAF1C,GAAP;AAIH,CAND;;AAQA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHrB,IAAAA,SAAS,EAAGsB,QAAD,IAAcD,QAAQ,CAACzC,OAAO,CAAC2C,gBAAR,CAAyBD,QAAzB,CAAD;AAD9B,GAAP;AAGH,CAJD;;AAKA,eAAezC,OAAO,CAACmC,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CtC,gBAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst AddMetadataField = props => {\n\n    const [authForm, setAuthForm] = useState({\n        categoryMetadataFieldName: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataFieldName',\n                placeholder: 'your categoryMetadataFieldName'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 0\n            },\n            valid: false,\n            touched: false\n        }\n    })\n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onClicked(authForm);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n            {props.error}\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    \n    return {\n      error:state.category.error,\n      metadataFieldsAddedSuccessfully:state.category.metadataFieldsAddedSuccessfully\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: (formData) => dispatch(actions.addMetadataField(formData))\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddMetadataField)\n"]},"metadata":{},"sourceType":"module"}