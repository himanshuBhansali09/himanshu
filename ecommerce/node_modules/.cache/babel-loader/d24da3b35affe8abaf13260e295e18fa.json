{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/AddSubCategory.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst AddSubCategory = props => {\n  const {\n    onClicked3\n  } = props;\n  useEffect(() => {\n    onClicked3();\n  }, [onClicked3]);\n  let option = [];\n\n  if (props.categoriesWithoutLeaf !== null) {\n    for (let i = 0; i < props.categoriesWithoutLeaf.length; i++) {\n      option.push({\n        value: props.categoriesWithoutLeaf[i].id,\n        displayValue: props.categoriesWithoutLeaf[i].name\n      });\n    }\n  }\n\n  const [authForm, setAuthForm] = useState({\n    category: {\n      elementType: 'select',\n      elementConfig: {\n        options: option\n      },\n      value: option[0].value,\n      validation: {},\n      valid: true\n    },\n    categoryName: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryName',\n        placeholder: 'your categoryName'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  const Handler = event => {\n    event.preventDefault();\n    props.onFormSubmit(authForm.categoryName.value, authForm.category.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: Handler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.category.error,\n    categoriesWithoutLeaf: state.category.categoriesWithoutLeaf\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFormSubmit: (name, id) => dispatch(actions.addSubCategory(name, id)),\n    onClicked3: () => dispatch(actions.getCategoriesForAdd())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSubCategory);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/AddSubCategory.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","AddSubCategory","props","onClicked3","option","categoriesWithoutLeaf","i","length","push","value","id","displayValue","name","authForm","setAuthForm","category","elementType","elementConfig","options","validation","valid","categoryName","type","placeholder","required","minLength","touched","Handler","event","preventDefault","onFormSubmit","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","mapDispatchToProps","dispatch","addSubCategory","getCategoriesForAdd"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst AddSubCategory = props => {\n\n    const {onClicked3}=props\n    useEffect(()=>{\n       \n        onClicked3()\n    },[onClicked3])\n    let option=[]\n    if(props.categoriesWithoutLeaf!==null)\n    {\n    for(let i=0;i<props.categoriesWithoutLeaf.length;i++)\n    {\n        option.push({\n            value:props.categoriesWithoutLeaf[i].id,\n            displayValue:props.categoriesWithoutLeaf[i].name\n        })\n    }\n}\n    \n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        categoryName: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryName',\n                placeholder: 'your categoryName'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        },\n        \n    })\n   \n    const Handler = (event) => {\n        event.preventDefault();\n        props.onFormSubmit(authForm.categoryName.value,authForm.category.value);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={Handler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    \n    return {\n        error: state.category.error,\n        categoriesWithoutLeaf:state.category.categoriesWithoutLeaf\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFormSubmit: (name,id) => dispatch(actions.addSubCategory(name,id)),\n        onClicked3:()=>dispatch(actions.getCategoriesForAdd())\n        \n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(AddSubCategory)\n"]},"metadata":{},"sourceType":"module"}