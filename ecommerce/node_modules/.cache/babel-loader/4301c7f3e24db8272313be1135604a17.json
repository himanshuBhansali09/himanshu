{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/Category.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst Category = props => {\n  const {\n    onClicked\n  } = props;\n  useEffect(() => {\n    onClicked();\n  }, [onClicked]);\n  let option = [];\n\n  for (let i in props.category[i]) {\n    console.log(i);\n    option.push({\n      value: i.name,\n      displayValue: i.name\n    });\n  }\n\n  const [authForm, setAuthForm] = useState({\n    category: {\n      elementType: 'select',\n      elementConfig: {\n        options: [option]\n      },\n      value: 'fastest',\n      validation: {},\n      valid: true\n    },\n    confirmPassword: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'confirmpassword',\n        placeholder: 'your confirmpassword'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.passwordChangeSuccessful) {\n    if (localStorage.getItem('roleName') === \"ROLE_CUSTOMER\") {\n      props.history.push(\"/account\");\n    } else {\n      props.history.push(\"/sellerAccount\");\n    }\n  }\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onSetPassword(authForm);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  console.log(state.category.category);\n  return {\n    error: state.category.error,\n    category: state.category.category\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Category);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/Category.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","Category","props","onClicked","option","i","category","console","log","push","value","name","displayValue","authForm","setAuthForm","elementType","elementConfig","options","validation","valid","confirmPassword","type","placeholder","required","minLength","touched","passwordChangeSuccessful","localStorage","getItem","history","registerHandler","event","preventDefault","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","mapDispatchToProps","dispatch","getCategory"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst Category = props => {\n\n    const { onClicked } = props\n    useEffect(() => {\n        onClicked()\n    }, [onClicked])\n\n    let option=[]\n    for(let i in props.category[i])\n    {\n        console.log(i)\n        option.push({\n            value:i.name,\n            displayValue:i.name\n        })\n    }\n\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: [                    \n                    option\n                ]\n            },\n            value: 'fastest',\n            validation: {},\n            valid: true\n        },\n        confirmPassword: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'confirmpassword',\n                placeholder: 'your confirmpassword'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n    if (props.passwordChangeSuccessful) {\n        if (localStorage.getItem('roleName') === \"ROLE_CUSTOMER\") {\n            props.history.push(\"/account\")\n        }\n        else {\n            props.history.push(\"/sellerAccount\")\n        }\n    }\n\n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onSetPassword(authForm);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    console.log(state.category.category)\n    return {\n        error: state.category.error,\n        category: state.category.category\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory())\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Category)\n"]},"metadata":{},"sourceType":"module"}