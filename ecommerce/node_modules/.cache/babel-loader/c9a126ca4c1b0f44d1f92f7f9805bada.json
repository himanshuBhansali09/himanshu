{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Login/Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport { Redirect } from 'react-router-dom';\n\nconst Login = props => {\n  const [authForm, setAuthForm] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'your email'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  useEffect(() => {\n    console.log(\"use effect calling\");\n\n    if (props.authRedirectPath !== '/') {\n      props.onSetAuthRedirectPath();\n    }\n  }, []);\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onAuth(authForm.email.value, authForm.password.value);\n  };\n\n  const redirectToSignup = () => {\n    props.history.push(\"/register\");\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }));\n  let authRedirect = null;\n  console.log(props.isAuthenticated);\n  console.log(props.authRedirectPath);\n\n  if (props.isAuthenticated) {\n    //authRedirect=<Redirect to={props.authRedirectPath}/>\n    props.history.push(\"/\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 18\n    }\n  }, \"Login\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.MyStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 14\n    }\n  }, \"New to this site\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button1,\n    onClick: redirectToSignup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 14\n    }\n  }, \"SignUp now\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isAuthenticated: state.token !== null,\n    authRedirectPath: state.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, passsword) => dispatch(actions.auth(email, passsword)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Login/Login.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","connect","actions","Redirect","Login","props","authForm","setAuthForm","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","console","log","authRedirectPath","onSetAuthRedirectPath","inputChangedHandler","event","controlName","updatedControls","target","submitHandler","preventDefault","onAuth","redirectToSignup","history","push","formElementsArray","key","id","config","form","map","formElement","authRedirect","isAuthenticated","Auth","Button","MyStyle","Button1","mapStateToProps","state","token","mapDispatchToProps","dispatch","passsword","auth","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from './login.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport {Redirect} from 'react-router-dom';\n\nconst Login = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            email:{\n                elementType:'input',\n                elementConfig:{\n                    type:'email',\n                    placeholder:'your email'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    isEmail: true\n                },\n                valid : false,\n                touched:false\n            },\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'password',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        useEffect(()=>{\n            console.log(\"use effect calling\")\n            if(props.authRedirectPath!=='/'){\n                props.onSetAuthRedirectPath();\n            }\n        },[])\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const submitHandler=(event)=>{\n        event.preventDefault();\n        props.onAuth(authForm.email.value,authForm.password.value)\n    }\n\n    const redirectToSignup=()=>{\n       props.history.push(\"/register\")\n    }\n\n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n        let authRedirect = null;\n        console.log(props.isAuthenticated)\n        console.log(props.authRedirectPath)\n        if(props.isAuthenticated){\n\n            //authRedirect=<Redirect to={props.authRedirectPath}/>\n            props.history.push(\"/\")\n        }\n\n        return (\n            <React.Fragment>\n            <div className={classes.Auth}>\n               \n                <form onSubmit={submitHandler}>\n                 {form}\n                 <button className={classes.Button}>Login</button>\n                </form>\n                \n            </div>\n            <div className={classes.MyStyle}>\n            <h3>\n             <label>New to this site</label>\n             </h3>\n            \n             <button className={classes.Button1} onClick={redirectToSignup}>SignUp now</button>\n             </div>\n             </React.Fragment>\n        )\n        \n        }\n\nconst mapStateToProps = state=>{\n            return{\n                isAuthenticated:state.token!==null,\n                authRedirectPath:state.authRedirectPath\n            }\n        }\n        \nconst mapDispatchToProps = dispatch =>{\n            return{\n                onAuth: (email,passsword)=>dispatch(actions.auth(email,passsword)),\n                onSetAuthRedirectPath: ()=> dispatch(actions.setAuthRedirectPath('/'))\n            }\n        }\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Login)\n"]},"metadata":{},"sourceType":"module"}