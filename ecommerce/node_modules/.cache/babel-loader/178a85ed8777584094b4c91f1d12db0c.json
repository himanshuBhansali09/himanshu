{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js\";\nimport React, { useState } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst UpdateMetadataValues = props => {\n  // useEffect(()=>{\n  //     a(authForm.category.value)\n  //        },[authForm.category.value])\n  let option = [];\n\n  if (props.category !== null) {\n    for (let i = 0; i < props.category.length; i++) {\n      option.push({\n        value: props.category[i].id,\n        displayValue: props.category[i].name\n      });\n    }\n  }\n\n  let metaid = [];\n  let option1 = [];\n\n  if (props.metadataFields !== null) {\n    for (let i = 0; i < props.metadataFields.length; i++) {\n      option1.push({\n        value: props.metadataFields[i].id,\n        displayValue: props.metadataFields[i].name\n      });\n    }\n  }\n\n  console.log(\"before auth\", metaid);\n  const [authForm, setAuthForm] = useState({\n    category: {\n      elementType: 'select',\n      elementConfig: {\n        options: option\n      },\n      value: option[0].value,\n      validation: {},\n      valid: true\n    },\n    metadataFields: {\n      elementType: 'select',\n      elementConfig: {\n        options: metaid\n      },\n      value: option1[0].value,\n      validation: {},\n      valid: true\n    },\n    categoryMetadataField: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'categoryMetadataField',\n        placeholder: 'your categoryMetadataFieldValues'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  }); // const a=(id)=>{\n  //     metaid=[]\n  //     console.log(\"id is\",id)\n  //     for (let i = 0; i < props.metadataFields.length; i++) {\n  //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n  //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n  //             console.log(\"id received\",id)\n  //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n  //             if(a==id)\n  //             {\n  //                 metaid.push({\n  //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n  //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n  //                     )\n  //             }\n  //         }\n  //     }\n  //     console.log(\"metaid is\",metaid)\n  // }\n\n  console.log(document.referrer, \"props\");\n\n  const registerHandler = event => {\n    event.preventDefault();\n    props.onAdd(authForm.category.value, authForm.metadataFields.value, authForm.categoryMetadataField.value);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    onClick: fetchIdHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 17\n    }\n  }, \"Fetch Metadata Fields\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.category.error,\n    category: state.category.category,\n    metadataFields: state.category.metadataFields\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onClicked: () => dispatch(actions.getCategory()),\n    onClicked1: () => dispatch(actions.viewCategoryMetadataField),\n    onAdd: (id1, id2, values) => dispatch(actions.add(id1, id2, values))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/Category/UpdateMetadataValues.js"],"names":["React","useState","Input","classes","checkValidity","actions","connect","UpdateMetadataValues","props","option","category","i","length","push","value","id","displayValue","name","metaid","option1","metadataFields","console","log","authForm","setAuthForm","elementType","elementConfig","options","validation","valid","categoryMetadataField","type","placeholder","required","minLength","touched","document","referrer","registerHandler","event","preventDefault","onAdd","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","config","form","map","formElement","Auth","Button","fetchIdHandler","mapStateToProps","state","error","mapDispatchToProps","dispatch","onClicked","getCategory","onClicked1","viewCategoryMetadataField","id1","id2","values","add"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../ChangePassword/changePassword.module.css';\nimport { checkValidity } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst UpdateMetadataValues = props => {\n\n\n    // useEffect(()=>{\n    //     a(authForm.category.value)\n    //        },[authForm.category.value])\n       \n\n    let option=[]\n    if(props.category!==null)\n    {\n    for(let i=0;i<props.category.length;i++)\n    {\n        option.push({\n            value:props.category[i].id,\n            displayValue:props.category[i].name\n        })\n    }\n}\nlet metaid = [];\n    let option1=[]\n    if(props.metadataFields!==null)\n    {\n    for(let i=0;i<props.metadataFields.length;i++)\n    {\n        option1.push({\n            value:props.metadataFields[i].id,\n            displayValue:props.metadataFields[i].name\n        })\n    }\n}\n\nconsole.log(\"before auth\",metaid)\n    const [authForm, setAuthForm] = useState({\n        category: {\n            elementType: 'select',\n            elementConfig: {\n                options: option\n            },\n            value: option[0].value,\n            validation: {},\n            valid: true\n        },\n        metadataFields: {\n            elementType: 'select',\n            elementConfig: {\n                options: metaid\n            },\n            value: option1[0].value,\n            validation: {},\n            valid: true\n        },\n        categoryMetadataField: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'categoryMetadataField',\n                placeholder: 'your categoryMetadataFieldValues'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    })\n    // const a=(id)=>{\n    //     metaid=[]\n    //     console.log(\"id is\",id)\n    //     for (let i = 0; i < props.metadataFields.length; i++) {\n    //         for (let j in props.metadataFields[i].categoryMetadataFieldValues) {\n    //             console.log(\"id inside\",props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid)\n    //             console.log(\"id received\",id)\n    //             let a = props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.cid\n    //             if(a==id)\n    //             {\n                    \n    //                 metaid.push({\n    //                     value:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid,\n    //         displayValue:props.metadataFields[i].categoryMetadataFieldValues[j].categoryMetadataFieldValuesId.mid}\n    //                     )\n    //             }\n    //         }\n    //     }\n    //     console.log(\"metaid is\",metaid)\n    // }\n\n    \n  \n    console.log(document.referrer,\"props\")\n\n    \n    const registerHandler = (event) => {\n        event.preventDefault();\n        props.onAdd(authForm.category.value,authForm.metadataFields.value,authForm.categoryMetadataField.value);\n    }\n\n    const inputChangedHandler = (event, controlName) => {\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\n\n                touched: true\n            }\n\n        };\n        setAuthForm(updatedControls);\n    }\n\n    const formElementsArray = [];\n    for (let key in authForm) {\n        formElementsArray.push({\n            id: key,\n            config: authForm[key]\n\n        })\n    }\n\n    let form = formElementsArray.map(formElement => (\n        <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event) => inputChangedHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n        />\n    ))\n\n    return (\n        <div className={classes.Auth}>\n            <form onSubmit={registerHandler}>\n                {form}\n                <button className={classes.Button} onClick={fetchIdHandler}>Fetch Metadata Fields</button>\n                <button className={classes.Button}>Submit</button>\n            </form>\n        </div>\n    )\n\n}\n\n\nconst mapStateToProps = state => {\n    \n    return {\n        error: state.category.error,\n        category: state.category.category,\n        metadataFields:state.category.metadataFields\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onClicked: () => dispatch(actions.getCategory()),\n        onClicked1:()=>dispatch(actions.viewCategoryMetadataField),\n        onAdd:(id1,id2,values)=>dispatch(actions.add(id1,id2,values))\n\n\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateMetadataValues)\n"]},"metadata":{},"sourceType":"module"}