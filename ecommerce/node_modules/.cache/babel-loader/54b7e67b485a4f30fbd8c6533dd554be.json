{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const registerStart = () => {\n  return {\n    type: actionTypes.REGISTER_START\n  };\n};\nexport const registerSuccess = () => {\n  return {\n    type: actionTypes.REGISTER_SUCCESS\n  };\n};\nexport const registerFail = error => {\n  return {\n    type: actionTypes.REGISTER_FAIL,\n    error: error\n  };\n};\nexport const register = (email, firstName, lastName, password, confirmPassword, contactNumber) => {\n  return dispatch => {\n    dispatch(registerStart());\n    const data = {\n      'username': email,\n      'firstName': firstName,\n      'lastName': lastName,\n      'password': password,\n      'confirmPassword': confirmPassword,\n      'contactNo': contactNumber\n    };\n    axios.post(\"/registerAsCustomer\", data).then(response => {\n      dispatch(registerSuccess());\n    }).catch(error => {\n      dispatch(registerFail(error.response.data.message));\n\n      if (password !== confirmPassword) {\n        alert(\"password and confirm password are not same\");\n      } else {\n        alert(error.response.data.message);\n      }\n\n      console.log(error.response);\n    });\n  };\n};\nexport const registerAsSeller = formData => {\n  return dispatch => {\n    dispatch(registerStart());\n    const data = {\n      \"username\": formData.email.value,\n      \"password\": formData.password.value,\n      \"confirmPassword\": formData.confirmpassword.value,\n      \"firstName\": formData.firstName.value,\n      \"lastName\": formData.lastName.value,\n      \"companyName\": formData.companyName.value,\n      \"companyContactNo\": formData.companyContactNo.value,\n      \"city\": formData.city.value,\n      \"state\": formData.state.value,\n      \"country\": formData.country.value,\n      \"zipcode\": formData.zipcode.value,\n      \"addressLine\": formData.addressLine.value,\n      \"gstNo\": formData.gstNo.value\n    };\n    axios.post(\"/registerAsSeller\", data).then(response => {\n      dispatch(registerSuccess());\n    }).catch(error => {\n      dispatch(registerFail(error.response.data.message));\n\n      if (password !== formData.confirmpassword.value) {\n        alert(\"password and confirm password does not match\");\n      } else {\n        alert(error.response.data.message);\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/store/actions/register.js"],"names":["actionTypes","axios","registerStart","type","REGISTER_START","registerSuccess","REGISTER_SUCCESS","registerFail","error","REGISTER_FAIL","register","email","firstName","lastName","password","confirmPassword","contactNumber","dispatch","data","post","then","response","catch","message","alert","console","log","registerAsSeller","formData","value","confirmpassword","companyName","companyContactNo","city","state","country","zipcode","addressLine","gstNo"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\nexport const registerStart = () => {\n    return {\n        type: actionTypes.REGISTER_START\n    }\n}\n\nexport const registerSuccess = () => {\n    return {\n        type: actionTypes.REGISTER_SUCCESS \n    }\n}\n\nexport const registerFail = (error) => {\n    return {\n        type: actionTypes.REGISTER_FAIL,\n        error: error\n    }\n}\n\nexport const register=(email,firstName,lastName,password,confirmPassword,contactNumber)=>{\n    return dispatch=>{\n        dispatch(registerStart());\n        const data={\n            'username':email,\n            'firstName':firstName,\n            'lastName':lastName,\n            'password':password,\n            'confirmPassword':confirmPassword,\n            'contactNo':contactNumber\n        }\n        axios.post(\"/registerAsCustomer\",data).then((response=>{\n                dispatch(registerSuccess());\n        })).catch((error)=>{\n            dispatch(registerFail(error.response.data.message))\n            if(password!==confirmPassword)\n            {\n                alert(\"password and confirm password are not same\")\n            }\n            else\n            {\n                alert(error.response.data.message)\n            }\n            \n            console.log(error.response)\n        })\n    }\n}\nexport const registerAsSeller=(formData)=>{\n    return dispatch=>{\n        dispatch(registerStart());\n        const data= {\n            \"username\": formData.email.value,\n            \"password\": formData.password.value,\n            \"confirmPassword\": formData.confirmpassword.value,\n            \"firstName\": formData.firstName.value,\n            \"lastName\": formData.lastName.value,\n            \"companyName\":formData.companyName.value,\n            \"companyContactNo\":formData.companyContactNo.value,\n            \"city\":formData.city.value,\n            \"state\":formData.state.value,\n            \"country\":formData.country.value,\n            \"zipcode\":formData.zipcode.value,\n            \"addressLine\":formData.addressLine.value,\n            \"gstNo\":formData.gstNo.value\n     }\n     axios.post(\"/registerAsSeller\",data).then((response=>{\n        dispatch(registerSuccess())\n    })).catch((error)=>{\n        dispatch(registerFail(error.response.data.message))\n        if(password!==formData.confirmpassword.value)\n        {\n            alert(\"password and confirm password does not match\")\n        }\n        else\n        {\n            alert(error.response.data.message)\n        }\n    })\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}