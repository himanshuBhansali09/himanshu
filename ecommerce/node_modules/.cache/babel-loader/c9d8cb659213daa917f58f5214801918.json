{"ast":null,"code":"var _jsxFileName = \"/home/himanshu/Project/ecommerce/src/components/SetPassword/SetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport { checkValidity, updateObject } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nconst Register = props => {\n  const [authForm, setAuthForm] = useState({\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'passsword',\n        placeholder: 'your password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    },\n    confirmpassword: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'confirmpassword',\n        placeholder: 'your confirmpassword'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n\n  if (props.passwordChangeSuccessful) {\n    props.history.push(\"/login\");\n  }\n\n  const registerHandler = event => {\n    event.preventDefault();\n    const {\n      token\n    } = props.match.params;\n    props.onSetPassword(authForm.password.value, authForm.confirmpassword.value, token);\n  };\n\n  const inputChangedHandler = (event, controlName) => {\n    const updatedControls = { ...authForm,\n      [controlName]: { ...authForm[controlName],\n        value: event.target.value,\n        valid: checkValidity(event.target.value, authForm[controlName].validation),\n        touched: true\n      }\n    };\n    setAuthForm(updatedControls);\n  };\n\n  const formElementsArray = [];\n\n  for (let key in authForm) {\n    formElementsArray.push({\n      id: key,\n      config: authForm[key]\n    });\n  }\n\n  let form = formElementsArray.map(formElement => /*#__PURE__*/React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    changed: event => inputChangedHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.Auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: registerHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, form, /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 18\n    }\n  }, \"Submit\")));\n};\n\nconst mapStateToProps = state => {\n  return {\n    error: state.register.error,\n    passwordChangeSuccessful: state.forgotPassword.passwordChangeSuccessful\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSetPassword: (password, confirmPassword, token) => dispatch(actions.setPassword(password, confirmPassword, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/home/himanshu/Project/ecommerce/src/components/SetPassword/SetPassword.js"],"names":["React","useState","useEffect","Input","classes","checkValidity","updateObject","actions","connect","Register","props","authForm","setAuthForm","password","elementType","elementConfig","type","placeholder","value","validation","required","minLength","valid","touched","confirmpassword","passwordChangeSuccessful","history","push","registerHandler","event","preventDefault","token","match","params","onSetPassword","inputChangedHandler","controlName","updatedControls","target","formElementsArray","key","id","config","form","map","formElement","Auth","Button","mapStateToProps","state","error","register","forgotPassword","mapDispatchToProps","dispatch","confirmPassword","setPassword"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from 'react'\nimport Input from '../../components/Ui/Backdrop/Input/Input';\nimport classes from '../Login/login.module.css';\nimport {checkValidity,updateObject} from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport { connect } from 'react-redux';\nconst Register = props => {\n    \n    const[authForm,setAuthForm] =  useState({\n            password:{\n                elementType:'input',\n                elementConfig:{\n                    type:'passsword',\n                    placeholder:'your password'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            },\n            confirmpassword:{\n                elementType:'input',\n                elementConfig:{\n                    type:'confirmpassword',\n                    placeholder:'your confirmpassword'\n                },\n                value:'',\n                validation:{\n                    required:true,\n                    minLength: 6\n                },\n                valid : false,\n                touched:false\n            }\n        })\n        if(props.passwordChangeSuccessful)\n        {\n            props.history.push(\"/login\")\n        }\n\n        const registerHandler=(event)=>{\n            event.preventDefault();\n            const {token} = props.match.params;\n            props.onSetPassword(authForm.password.value,authForm.confirmpassword.value,token);\n        }\n\n     const inputChangedHandler = (event,controlName)=>{\n        const updatedControls = {\n            ...authForm,\n            [controlName]: {\n                ...authForm[controlName],\n                value: event.target.value,\n                valid: checkValidity(event.target.value,authForm[controlName].validation),\n                \n                touched:true\n            }\n        };\n        setAuthForm(updatedControls);\n    }\n    \n        const formElementsArray=[];\n        for(let key in authForm){\n            formElementsArray.push({\n                id:key,\n                config:authForm[key]\n\n            })\n        }\n\n        \n        let form = formElementsArray.map(formElement=>(\n            <Input\n            key = {formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={(event)=>inputChangedHandler(event,formElement.id)}\n            touched={formElement.config.touched}\n            />\n        ))\n\n        return (\n            <div className={classes.Auth}>\n                <form onSubmit={registerHandler}>\n                 {form}\n                 <button className={classes.Button}>Submit</button>\n                </form>\n            </div>\n        )\n        \n        }\n\n\nconst mapStateToProps = state=>{\n    return{\n        error:state.register.error,\n        passwordChangeSuccessful:state.forgotPassword.passwordChangeSuccessful\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return{\n        onSetPassword: (password,confirmPassword,token)=>dispatch(actions.setPassword(password,confirmPassword,token))\n    }\n}\nexport default connect(mapStateToProps,mapDispatchToProps)(Register)\n"]},"metadata":{},"sourceType":"module"}